<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Operating System 9 - Synchronous</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-9-synchronous/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-9-synchronous/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 8 - CPU allocation</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-8-cpu-allocation/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-8-cpu-allocation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 7 - Process and Thread</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-7-process-and-thread/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-7-process-and-thread/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 6 - Context switch</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-6-context-switch/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-6-context-switch/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 5 - Virtual memory</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-5-virtual-memory/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-5-virtual-memory/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 4 - Discontinuous memory allocation</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-4-discontinuous-memory-allocation/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-4-discontinuous-memory-allocation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 3 - Continuous memory allocation</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-3-continuous-memory-allocation/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-3-continuous-memory-allocation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 2 - Basic Operation</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-2-basic-operation/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-2-basic-operation/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统的启动"><a href="#操作系统的启动" class="headerlink" title="操作系统的启动"></a>操作系统的启动</h2><ol><li><p>CPU, I&#x2F;O, 内存通过总线连接。</p></li><li><p>DISK: 存放OS</p><ul><li>BIOS：基本I&#x2F;O处理系统( basic I&#x2F;O system); Bootloader: 加载OS到内存中。</li></ul></li><li><p>当电脑通电时，段寄存器CS和指令寄存器IP能够确定一个内存地址，例如CS:IP &#x3D; 0xf000:fff0.</p></li><li><p>POST(加电自检)，寻找显卡和执行BIOS。(显示器，键盘…是否正常)。</p></li><li><p>步骤：</p><ul><li>BIOS: 将Bootloader从磁盘的磁盘的引导扇区(512字节)加载到0x7c00；跳转到CS:IP&#x3D;0000:7c00的内存区域(以便下一步)</li><li>Bootloader：将操作系统的代码和数据从硬盘加载到内存中；跳转到操作系统的起始地址。</li></ul></li><li><p>系统调用：(来源于应用程序)应用程序主动向操作系统发出服务请求。</p></li><li><p>异常：(来源于不良的应用程序)非法指令或其它花的处理状态(e.g.内存出错)。</p></li><li><p>中断：(来源于外设)来自不同的硬件设备的计时器和网络的中断。</p></li><li><p>为什么应用程序不能直接访问硬件而是通过操作系统？</p><ul><li>计算机运行时，内核是被信任的第三方。</li><li>只有内核可以执行特权指令。</li><li>为了方便应用程序。</li></ul></li><li><p>讨论的问题：操作系统如何设计和实现中断&#x2F;异常和系统调用；他们三者的区别和特点。</p></li><li><p>产生的源头</p><ul><li>中断：外设(键盘&#x2F;鼠标&#x2F;网卡&#x2F;声卡&#x2F;显卡，可以产生各种事件)</li><li>异常：应用程序意想不到的行为(e.g.异常，恶意程序，应用程序需要的资源未得到满足)</li><li>系统调用(system call)：应用程序请求操作提供服务(e.g.打开&#x2F;关闭&#x2F;读写文件，发送网络包)</li></ul></li><li><p>处理时间</p><ul><li>中断：异步；</li><li>异常：同步；</li><li>系统调用：同步或异步。</li></ul></li><li><p>响应</p><ul><li>中断：持续，对用户应用程序时透明的</li><li>异常：杀死或者重新执行意想不到的应用程序指令</li><li>系统调用：等待和持续</li></ul></li></ol><h2 id="中断-x2F-异常和系统调用"><a href="#中断-x2F-异常和系统调用" class="headerlink" title="中断&#x2F;异常和系统调用"></a>中断&#x2F;异常和系统调用</h2><ol><li>中断&#x2F;异常处理机制<ul><li>中断是外设的事件，异常是CPU的事件；中断&#x2F;异常迫使CPU访问一些被中断和异常服务访问的功能。</li></ul></li><li>中断处理机制<ul><li>硬件：设置中断标记(CPU初始化)<ul><li>将内部&#x2F;外部事件设置中断标记；</li><li>中断事件的ID(程序访问的中断向量地址)</li></ul></li><li>软件(操作系统)：<ul><li>保存当前处理状态</li><li>中断服务程序处理</li><li>清除中断标记</li><li>恢复之前保存的处理状态</li></ul></li></ul></li><li>异常处理机制<ul><li>异常：异常编号</li><li>保存现场</li><li>异常处理：杀死产生异常的程序；重新执行异常指令</li><li>恢复现场</li></ul></li><li>系统调用<ul><li><p>一条指令会触发一个系统调用</p></li><li><p>程序访问主要是通过高层次的API接口而不是直接进行系统调用。</p></li><li><p>通常情况下，存在与每个系统调用相关的序号，系统调用接口根据这些序号来维护表的索引。</p></li><li><p>系统调用接口调用内核态中预期的系统调用，并返回系统调用的状态和其它任何返回值。</p></li><li><p>用户不需要知道系统调用是如何实现的，只需要获取API和了解操作新系统将什么作为返回结果。操作系统接口的细节大部分都隐藏在API中，并通过运行程序支持的库来管理。</p></li><li><p>用户态：应用程序在执行的过程中，CPU执行的特权级的状态(很低，不能访问特殊机器指令和IO)。</p></li><li><p>内核态：应用程序在执行的过程中，CPU执行的特权级的状态(高，操作系统可以执行CPU任何一条指令)。</p></li><li><p>系统调用时涉及到特权级从用户态到内核态的转换，应用程序和操作系统有各自的堆栈，这两个变化比函数调用的开销更大，但更安全和可靠。(而程序调用是在一个栈空间实现参数的调用和返回)。</p></li></ul></li><li>跨越操作系统边界的开销<ul><li>在执行时间上超过程序调用</li><li>开销包括：<ul><li>建立中断&#x2F;异常&#x2F;系统调用号与对应服务例程映射关系的初始化开销；</li><li>建立内核堆栈(操作系统和应用程序的堆栈不一样)；</li><li>验证参数(操作系统会检查数据)；</li><li>内核态映射到用户态的地址空间，更新页面映射权限(内存拷贝开销)；</li><li>内核态独立地址空间TLB。</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operating System 1 - Introduction</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-1-introduction/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-1-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h2><p><strong>用户角度：</strong>操作系统是一个控制软件</p><ul><li><p>管理应用程序</p></li><li><p>为应用程序提供服务</p></li><li><p>杀死应用程序</p></li><li><p>资源管理</p></li><li><p>管理外设&#x2F;分配资源</p></li></ul><ol><li><p>在操作系统下，进程&lt;-&gt;CPU, 文件&lt;-&gt;磁盘，地址空间&lt;-&gt;内存。</p></li><li><p>操作系统的架构层次：硬件之上，应用软件之下(为应用软件提供服务支持)。</p></li><li><p>Linux，Windows界面属于外壳shell(与User交互)，而不是内核kernel，而kernel是研究重点，在shell之下。</p></li><li><p>Kernel包括：</p><ul><li><p>CPU调度器</p></li><li><p>物理内存管理</p></li><li><p>虚拟内存管理</p></li><li><p>文件系统管理</p></li><li><p>中断处理和IO设备驱动 (底层硬件)</p></li></ul></li><li><p>(5) OS Kernel的特征：</p><ul><li><p>并发(指一段时间内多个程序运行；而并行是指一个时间点上多个程序运行，要求多个CPU):计算机系统中同时存在多个运行的程序，需要OS管理和调度</p></li><li><p>共享：“同时”访问 或 互斥共享</p></li><li><p>虚拟：利用多道程序设计技术，让每一个用户都觉得有一个计算机专门为他服务</p></li><li><p>异步：程序的执行不是一步到底的，而是走走停停，向前推进的速度不可预知</p></li><li><p>但只要运行环境相同，OS要保证程序运行的结果也相同</p></li></ul></li></ol><h2 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h2><p><strong>(1)简单的操作系统</strong><br>MS-DOS 不分模块的单体内核 (内部通过函数调用访问,缺点，复杂，紧耦合，易受攻击)</p><p><strong>(2)微内核</strong><br>尽可能把内核功能移植到用户空间，缺点性能低。</p><p><strong>(3)外核，内核分为一块</strong></p><p>一块负责和硬件打交道，另一部分和应用打交道。</p><p><strong>(4)虚拟机</strong><br>VMs(虚拟机)-&gt;VMM(虚拟机监视器)-&gt;物理机硬件，多操作系统共享硬件资源。</p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Exception and Debug</title>
      <link href="/liangjunyi.github.io/2022/06/18/exception-and-debug/"/>
      <url>/liangjunyi.github.io/2022/06/18/exception-and-debug/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Exception-and-Debug"><a href="#Python-Exception-and-Debug" class="headerlink" title="Python Exception and Debug"></a>Python Exception and Debug</h1><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>处理一些不可预料的情况，比如文件不存在，空间满了，通讯超时等等。</p><p>遇到这些问题了程序该如何执行？</p><p>这就是异常处理的价值和我们处理异常的目的。</p><h2 id="Python常见的异常"><a href="#Python常见的异常" class="headerlink" title="Python常见的异常"></a>Python常见的异常</h2><ul><li>ZeroDivisionError</li><li>NameError</li><li>TypeError</li></ul><h3 id="Eg"><a href="#Eg" class="headerlink" title="Eg:"></a>Eg:</h3><h4 id="ZeroDivisionError"><a href="#ZeroDivisionError" class="headerlink" title="ZeroDivisionError"></a>ZeroDivisionError</h4><p><img src="https://s2.loli.net/2022/06/18/ds5BLRupw9Xn4YF.png" alt="image-20220618180916517"></p><ul><li>这么写，没有任何的语法错误，IDE不会报错</li></ul><p><img src="https://s2.loli.net/2022/06/18/uh9NHbsnZYCQ8Wy.png" alt="image-20220618181014653"></p><ul><li>但是一运行起来就发现了错误</li></ul><h4 id="NameError"><a href="#NameError" class="headerlink" title="NameError"></a>NameError</h4><p><img src="https://s2.loli.net/2022/06/18/Z1mzoOG9N7iL3aD.png" alt="image-20220618181230216"></p><ul><li>之前没有定义过b，但是这里用到了</li></ul><h4 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h4><p><img src="https://s2.loli.net/2022/06/18/DK9Zi4vhFsSlWzN.png" alt="image-20220618181313133"></p><ul><li>两个不同类型的数强制进行运算</li></ul><h2 id="Python-的异常处理语法"><a href="#Python-的异常处理语法" class="headerlink" title="Python 的异常处理语法"></a>Python 的异常处理语法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>程序执行语句块<span class="token keyword">except</span> ExceptionName <span class="token keyword">as</span> alias<span class="token punctuation">:</span>    异常处理语句块<span class="token keyword">except</span> ExceptionName <span class="token keyword">as</span> alias<span class="token punctuation">:</span>    异常处理语句块<span class="token keyword">except</span> ExceptionName <span class="token keyword">as</span> alias<span class="token punctuation">:</span>    异常处理语句块<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    无异常时处理语句块<span class="token keyword">finally</span><span class="token punctuation">:</span>    必须处理语句块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Exception 类型有很多，可以层层分析，对应着处理。最后可以加上处理 Exception 的语句，因为 Exception是父类，能捕获所有的异常。</li><li>Exception</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="example-1-简单例子"><a href="#example-1-简单例子" class="headerlink" title="example 1 - 简单例子"></a>example 1 - 简单例子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------End of the process-------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ZeroDivisionError'</span><span class="token operator">></span>division by zero<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>End of the process<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>10&#x2F;0 ， ZeroDivisionError 的异常被成功 catch</li></ul><h3 id="example-2-合并两个-except"><a href="#example-2-合并两个-except" class="headerlink" title="example 2 - 合并两个 except"></a>example 2 - 合并两个 except</h3><ul><li>从上面的例子可以看到，我们的程序对于两个不同异常的处理手段是一样的，那么可以合并</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------End of the process-------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ZeroDivisionError'</span><span class="token operator">></span>division by zero<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>End of the process<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依然成功执行了</li></ul><h3 id="example-3-Exception"><a href="#example-3-Exception" class="headerlink" title="example 3 - Exception"></a>example 3 - Exception</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------End of the process-------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'TypeError'</span><span class="token operator">></span>can only concatenate <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">"int"</span><span class="token punctuation">)</span> to <span class="token builtin">str</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>End of the process<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我们可以在最后抓住Exception，这样不管任何类型的异常，无论考虑到的还是没考虑到的，都能抓住。</p></li><li><p>我们没有针对TypeError 进行捕获，但依然catch了。</p></li></ul><h3 id="example-4-else"><a href="#example-4-else" class="headerlink" title="example 4 - else"></a>example 4 - else</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'else'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------End of the process-------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">else</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>End of the process<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>语句中没有任何错误，所以程序执行else语句</li><li>当任一一个错误被捕获，else语句都不会被执行</li></ul><h3 id="example-5-finally"><a href="#example-5-finally" class="headerlink" title="example 5 - finally"></a>example 5 - finally</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'else'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------End of the process-------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ZeroDivisionError'</span><span class="token operator">></span>division by zero<span class="token keyword">finally</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>End of the process<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>finally 语句一定会执行</li><li>就算程序没错误，执行了else，也会执行finally</li></ul><h2 id="Python-内置异常类型"><a href="#Python-内置异常类型" class="headerlink" title="Python 内置异常类型"></a>Python 内置异常类型</h2><p><img src="https://s2.loli.net/2022/06/18/rIg2QXnFwE74hsA.png" alt="image-20220618214423110"></p><h2 id="主动抛出异常-raise"><a href="#主动抛出异常-raise" class="headerlink" title="主动抛出异常 - raise"></a>主动抛出异常 - raise</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Exception </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript提高之面向对象(六)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-7/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript提高之面向对象(六)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-6/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶之BOM技术(五)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-5/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶之DOM技术(四)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-4/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-4/</url>
      
        <content type="html"><![CDATA[<h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/f073657f05c248ffa8056bf437e66edb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h1 id="1、DOM简介"><a href="#1、DOM简介" class="headerlink" title="1、DOM简介"></a>1、DOM简介</h1><h2 id="1-1、什么是DOM"><a href="#1-1、什么是DOM" class="headerlink" title="1.1、什么是DOM"></a>1.1、什么是DOM</h2><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口</p><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><p><img src="https://s2.loli.net/2022/06/13/jIwaBZrqJz3cKXP.png" alt="image-20220613170848302"></p><ul><li>文档：一个页面就是一个文档，DOM中使用doucument来表示</li><li>元素：页面中的所有标签都是元素，DOM中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</li></ul><p>DOM 把以上内容都看做是对象</p><h1 id="2、获取元素"><a href="#2、获取元素" class="headerlink" title="2、获取元素"></a>2、获取元素</h1><h2 id="2-1、如何获取页面元素"><a href="#2-1、如何获取页面元素" class="headerlink" title="2.1、如何获取页面元素"></a>2.1、如何获取页面元素</h2><p>DOM在我们实际开发中主要用来操作元素。</p><p>我们如何来获取页面中的元素呢?</p><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h2 id="2-2、根据ID获取"><a href="#2-2、根据ID获取" class="headerlink" title="2.2、根据ID获取"></a>2.2、根据ID获取</h2><p>使用 getElementByld() 方法可以获取带ID的元素对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">doucument<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span><span class="token string">'id名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>console.dir()</code> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p><p><strong>示例</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"time"</span><span class="token operator">></span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 1.因为我们文档页面从上往下加载，所以得先有标签，所以script写在标签下面</span>    <span class="token comment">// 2.get 获得 element 元素 by 通过 驼峰命名法</span>    <span class="token comment">// 3.参数 id是大小写敏感的字符串</span>    <span class="token comment">// 4.返回的是一个元素对象</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5. console.dir 打印我们的元素对象，更好的查看里面的属性和方法</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3、根据标签名获取"><a href="#2-3、根据标签名获取" class="headerlink" title="2.3、根据标签名获取"></a>2.3、根据标签名获取</h2><p>根据<strong>标签名</strong>获取，使用 <code>getElementByTagName()</code> 方法可以返回带有指定标签名的<strong>对象的集合</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">doucument<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li><li>得到元素对象是动态的</li><li>返回的是获取过来元素对象的集合，以伪数组的形式存储</li><li>如果获取不到元素，则返回为空的伪数组(因为获取不到对象)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>知否知否，应是等你好久<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>知否知否，应是等你好久<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>知否知否，应是等你好久<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>知否知否，应是等你好久<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>知否知否，应是等你好久<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 1.返回的是获取过来元素对象的集合 以伪数组的形式存储</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.依次打印,遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 3.如果页面中只有 1 个 li，返回的还是伪数组的形式</span>    <span class="token comment">// 4.如果页面中没有这个元素，返回的是空伪数组</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4、根据标签名获取"><a href="#2-4、根据标签名获取" class="headerlink" title="2.4、根据标签名获取"></a>2.4、根据标签名获取</h2><p>还可以根据标签名获取某个元素（父元素）内部所有指定标签名的子元素,获取的时候不包括父元素自己</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span>ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：父元素必须是单个对象(必须指明是哪一个元素对象)，获取的时候不包括父元素自己</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//element.getElementsByTagName('标签名'); 父元素必须是指定的单个元素</span>    <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5、通过H5新增方法获取"><a href="#2-5、通过H5新增方法获取" class="headerlink" title="2.5、通过H5新增方法获取"></a>2.5、通过H5新增方法获取</h2><h3 id="①getElementsByClassName"><a href="#①getElementsByClassName" class="headerlink" title="①getElementsByClassName"></a>①getElementsByClassName</h3><p>根据类名返回元素对象合集</p><ul><li><code>document.getElementsByClassName(&#39;类名&#39;)</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="②document-querySelector"><a href="#②document-querySelector" class="headerlink" title="②document.querySelector"></a>②document.querySelector</h3><p>根据指定选择器返回第一个元素对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切记里面的选择器需要加符号 </span><span class="token comment">// 类选择器.box </span><span class="token comment">// id选择器 #nav</span><span class="token keyword">var</span> firstBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③document-querySelectorAll"><a href="#③document-querySelectorAll" class="headerlink" title="③document.querySelectorAll"></a>③document.querySelectorAll</h3><p>根据指定选择器返回所有元素对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><p>querySelector 和 querySelectorAll 里面的选择器需要加符号,比如: document.querySelector(‘#nav’);</p><h3 id="④例子"><a href="#④例子" class="headerlink" title="④例子"></a>④例子</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span>    <span class="token keyword">var</span> boxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boxs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span>    <span class="token keyword">var</span> firstBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> nav <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nav<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span>    <span class="token keyword">var</span> allBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6、获取特殊元素"><a href="#2-6、获取特殊元素" class="headerlink" title="2.6、获取特殊元素"></a>2.6、获取特殊元素</h2><h5 id="①获取body元素"><a href="#①获取body元素" class="headerlink" title="①获取body元素"></a>①获取body元素</h5><p>返回body元素对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="②获取html元素"><a href="#②获取html元素" class="headerlink" title="②获取html元素"></a>②获取html元素</h5><p>返回html元素对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3、事件基础"><a href="#3、事件基础" class="headerlink" title="3、事件基础"></a>3、事件基础</h1><h3 id="3-1、事件概述"><a href="#3-1、事件概述" class="headerlink" title="3.1、事件概述"></a>3.1、事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： 触发— 响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><h3 id="3-2、事件三要素"><a href="#3-2、事件三要素" class="headerlink" title="3.2、事件三要素"></a>3.2、事件三要素</h3><ol><li>事件源(谁)</li><li>事件类型(什么事件)</li><li>事件处理程序(做啥)</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 点击一个按钮，弹出对话框</span>    <span class="token comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span>    <span class="token comment">//(1) 事件源 事件被触发的对象   谁  按钮</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span>    <span class="token comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span>    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点秋香'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3、执行事件的步骤"><a href="#3-3、执行事件的步骤" class="headerlink" title="3.3、执行事件的步骤"></a>3.3、执行事件的步骤</h3><ol><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 执行事件步骤</span>    <span class="token comment">// 点击div 控制台输出 我被选中了</span>    <span class="token comment">// 1. 获取事件源</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.绑定事件 注册事件</span>    <span class="token comment">// div.onclick </span>    <span class="token comment">// 3.添加事件处理程序 </span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我被选中了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4、鼠标事件"><a href="#3-4、鼠标事件" class="headerlink" title="3.4、鼠标事件"></a>3.4、鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h1 id="4、操作元素"><a href="#4、操作元素" class="headerlink" title="4、操作元素"></a>4、操作元素</h1><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p><h2 id="4-1、改变元素内容"><a href="#4-1、改变元素内容" class="headerlink" title="4.1、改变元素内容"></a>4.1、改变元素内容</h2><p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>innerText<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>innerHTML<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>        我是文字        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">// innerText 和 innerHTML的区别 </span>        <span class="token comment">// 1. innerText 不识别html标签,去除空格和换行</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;strong>今天是：&lt;/strong> 2019'</span><span class="token punctuation">;</span>        <span class="token comment">// 2. innerHTML 识别html标签 保留空格和换行的</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;strong>今天是：&lt;/strong> 2019'</span><span class="token punctuation">;</span>        <span class="token comment">// 这两个属性是可读写的  可以获取元素里面的内容</span>        <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/13/QXYHIfzU3GoL1tO.png" alt="image-20220613172131307"></p><h2 id="4-2、改变元素属性"><a href="#4-2、改变元素属性" class="headerlink" title="4.2、改变元素属性"></a>4.2、改变元素属性</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// img.属性</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">/</span> <span class="token boolean">false</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">/</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3、改变样式属性"><a href="#4-3、改变样式属性" class="headerlink" title="4.3、改变样式属性"></a>4.3、改变样式属性</h2><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><ul><li>行内样式操作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// element.style</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'250px'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>类名样式操作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// element.className</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ol><li>JS里面的样式采取驼峰命名法，比如 fontSize ，backgroundColor</li><li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class 因为是个保留字，因此使用className来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// this.style.backgroundColor = 'purple';</span>            <span class="token comment">// this.style.color = '#fff';</span>            <span class="token comment">// this.style.fontSize = '25px';</span>            <span class="token comment">// this.style.marginTop = '100px';</span>            <span class="token comment">// 让我们当前元素的类名改为了 change</span>            <span class="token comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span>            <span class="token comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span>            <span class="token comment">// this.className = 'change';</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'first change'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4、总结"><a href="#4-4、总结" class="headerlink" title="4.4、总结"></a>4.4、总结</h2><p><img src="https://s2.loli.net/2022/06/13/KEOg24ubzeWqYpM.png" alt="image-20220613172342677"></p><h2 id="4-5、排他思想"><a href="#4-5、排他思想" class="headerlink" title="4.5、排他思想"></a>4.5、排他思想</h2><p>如果有同一组元素，我们相要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">// 1. 获取所有按钮元素</span>        <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c4ab0beac7444b208441727a380b437e.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="4-6、自定义属性"><a href="#4-6、自定义属性" class="headerlink" title="4.6、自定义属性"></a>4.6、自定义属性</h2><h3 id="4-6-1、获取属性值"><a href="#4-6-1、获取属性值" class="headerlink" title="4.6.1、获取属性值"></a>4.6.1、获取属性值</h3><ul><li>获取内置属性值(元素本身自带的属性)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>属性<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取自定义的属性</li></ul><h3 id="4-6-2、设置属性值"><a href="#4-6-2、设置属性值" class="headerlink" title="4.6.2、设置属性值"></a>4.6.2、设置属性值</h3><ul><li>设置内置属性值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>属性 <span class="token operator">=</span> <span class="token string">'值'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>主要设置自定义的属性</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">,</span><span class="token string">'值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-6-3、移除属性"><a href="#4-6-3、移除属性" class="headerlink" title="4.6.3、移除属性"></a>4.6.3、移除属性</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础之对象与内置对象(三)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-3/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础之函数与作用域(二)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-2/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础大总结(一)</title>
      <link href="/liangjunyi.github.io/2022/06/13/javascript-1/"/>
      <url>/liangjunyi.github.io/2022/06/13/javascript-1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><ul><li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</li><li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li><li>现在也可以基于 Node.js 技术进行服务器端编程</li></ul><p><img src="https://s2.loli.net/2022/06/13/3AeNcqfsm89wTBM.png" alt="image-20220613130913213"></p><h3 id="浏览器执行JS简介"><a href="#浏览器执行JS简介" class="headerlink" title="浏览器执行JS简介"></a>浏览器执行JS简介</h3><p>览器分成两部分：渲染引擎和 JS 引擎</p><ul><li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li><li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li></ul><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><p><img src="https://s2.loli.net/2022/06/13/M5hJrdeRHXKibaQ.png" alt="image-20220613131015416"></p><h3 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h3><p>JavaScript 包括 ECMAScript、DOM、BOM</p><p><img src="https://s2.loli.net/2022/06/13/Zv4CgnJX8khxaUN.png" alt="image-20220613131058669"></p><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><p><strong>ECMAScript</strong> 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img src="https://s2.loli.net/2022/06/13/PCDeGFZol8IKtQb.png" alt="image-20220613131135413"></p><p>ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><h4 id="DOM文档对象模型"><a href="#DOM文档对象模型" class="headerlink" title="DOM文档对象模型"></a>DOM文档对象模型</h4><p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p><h4 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h4><p><strong>BOM</strong> (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h2 id="1、JS初体验"><a href="#1、JS初体验" class="headerlink" title="1、JS初体验"></a>1、JS初体验</h2><h3 id="1-1、行内式JS"><a href="#1-1、行内式JS" class="headerlink" title="1.1、行内式JS"></a>1.1、行内式JS</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"点我试试"</span> onclink<span class="token operator">=</span><span class="token string">"javascript:alert('Hello World')"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性)，如： onclink</li><li>注意单双引号的使用：在HTML中我们推荐使用<strong>双引号</strong>，JS中我们推荐使用<strong>单引号</strong></li><li>可读性差，在 HTML 中编入 JS 大量代码时，不方便阅读</li><li>特殊情况下使用</li></ol><h3 id="1-2、内嵌式JS"><a href="#1-2、内嵌式JS" class="headerlink" title="1.2、内嵌式JS"></a>1.2、内嵌式JS</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul><h3 id="1-3、外部JS"><a href="#1-3、外部JS" class="headerlink" title="1.3、外部JS"></a>1.3、外部JS</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"my.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>利于HTML页面代码结构化，把单独JS代码独立到HTML页面之外，既美观，又方便</li><li>引用外部JS文件的script标签中间不可以写代码</li><li>适合于JS代码量比较大的情况</li></ol><h2 id="2、JS基本语法"><a href="#2、JS基本语法" class="headerlink" title="2、JS基本语法"></a>2、JS基本语法</h2><h3 id="2-1、注释"><a href="#2-1、注释" class="headerlink" title="2.1、注释"></a>2.1、注释</h3><h4 id="2-1-1、单行注释"><a href="#2-1-1、单行注释" class="headerlink" title="2.1.1、单行注释"></a>2.1.1、单行注释</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-2、多行注释"><a href="#2-1-2、多行注释" class="headerlink" title="2.1.2、多行注释"></a>2.1.2、多行注释</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*多行注释*/</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>快捷键 <code>shift + alt + a</code></li><li>vscode中修改快捷键方式：vscode➡ 首选项按钮➡ 键盘快捷方式 ➡ 查找原来的快捷键➡ 修改为新的快捷键➡ 回车确认</li></ul><h3 id="2-2、输入输出语句"><a href="#2-2、输入输出语句" class="headerlink" title="2.2、输入输出语句"></a>2.2、输入输出语句</h3><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg);</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info);</td><td>浏览看弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li><code>alert()</code> 主要用来显示消息给用户</li><li><code>console.log()</code> 用来给程序员看自己运行时的消息</li></ul><h3 id="2-3、变量"><a href="#2-3、变量" class="headerlink" title="2.3、变量"></a>2.3、变量</h3><ul><li>变量是用于存放数据的<strong>容器</strong>，我们通过<strong>变量名</strong>获取数据，甚至数据可以修改</li><li><strong>本质：变量是程序在内存</strong>中申请的一块用来存放数据的空间</li></ul><h4 id="2-3-1、变量初始化"><a href="#2-3-1、变量初始化" class="headerlink" title="2.3.1、变量初始化"></a>2.3.1、变量初始化</h4><ol><li>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</li><li>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明变量同时赋值为18</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment">//同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> address <span class="token operator">=</span><span class="token string">'火影村'</span><span class="token punctuation">,</span>salary <span class="token operator">=</span> <span class="token number">15000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2、声明变量特殊情况"><a href="#2-3-2、声明变量特殊情况" class="headerlink" title="2.3.2、声明变量特殊情况"></a>2.3.2、声明变量特殊情况</h4><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age &#x3D; 10;console.log(age);</td><td>不声明 只赋值</td><td>10</td></tr></tbody></table><h4 id="2-3-3、变量的命名规范"><a href="#2-3-3、变量的命名规范" class="headerlink" title="2.3.3、变量的命名规范"></a>2.3.3、变量的命名规范</h4><ol><li><p>由字母(A-Z,a-z)，数字(0-9)，下划线(_)，美元符号($)组成，如:usrAge,num01,__name</p></li><li><p>严格区分大小写。 var app; 和 var App; 是两个变量</p></li><li><p>不能以数字开头。</p></li><li><p>不能是关键字，保留字。例如：var,for,while</p></li><li><p>遵循驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName</p></li></ol><h3 id="2-4、数据类型"><a href="#2-4、数据类型" class="headerlink" title="2.4、数据类型"></a>2.4、数据类型</h3><p><strong>JavaScript</strong> <strong>是一种弱类型或者说动态语言。</strong>这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//这是一个数字型</span><span class="token keyword">var</span> areYouOk <span class="token operator">=</span> <span class="token string">'使得'</span><span class="token punctuation">;</span><span class="token comment">//这是一个字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在代码运行时，变量的数据类型是由 JS引擎 根据 &#x3D; 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。</li><li>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//x为数字</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span><span class="token comment">//x为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JS 把数据类型分为两类：</p><ul><li>基本数据类型(Number,String,Boolean,Undefined,Null)</li><li>复杂数据类型(Object)</li></ul><h4 id="2-4-1、基本数据类型"><a href="#2-4-1、基本数据类型" class="headerlink" title="2.4.1、基本数据类型"></a>2.4.1、基本数据类型</h4><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如21，0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如true，false ，等价于1和0</td><td>false</td></tr><tr><td>Undefined</td><td>var a; 声明了变量a但是没有赋值，此时a&#x3D;undefined</td><td>undefined（未定义的）</td></tr><tr><td>string</td><td>字符串类型，如“张三”</td><td>“”</td></tr><tr><td>Null</td><td>var a &#x3D; null;声明了变量a为空值</td><td>null</td></tr></tbody></table><h4 id="2-4-2、数字型Number"><a href="#2-4-2、数字型Number" class="headerlink" title="2.4.2、数字型Number"></a>2.4.2、数字型Number</h4><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//整数</span><span class="token keyword">var</span> Age <span class="token operator">=</span> <span class="token number">21.3747</span><span class="token punctuation">;</span><span class="token comment">//小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.八进制数字序列范围：0~7</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">07</span><span class="token punctuation">;</span> <span class="token comment">//对应十进制的7</span><span class="token keyword">var</span> Num2 <span class="token operator">=</span> <span class="token number">019</span><span class="token punctuation">;</span><span class="token comment">//对应十进制的19</span><span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span><span class="token comment">//对应十进制的8</span><span class="token comment">// 2.十六进制数字序列范围：0~9以及A~F</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></li></ul><h5 id="①数字型范围"><a href="#①数字型范围" class="headerlink" title="①数字型范围"></a>①数字型范围</h5><ul><li>JS中数值的最大值：<code>Number.MAX_VALUE</code></li><li>JS中数值的最小值：<code>Number.MIN_VALUE</code></li></ul><h5 id="②数字型的三个特殊值"><a href="#②数字型的三个特殊值" class="headerlink" title="②数字型的三个特殊值"></a>②数字型的三个特殊值</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Infinity(无穷大)</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-Infinity(无穷小)</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//NaN - Not a Number ,代表任何一个非数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Infinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>Nan ，Not a Number，代表一个非数值</li></ul><h5 id="③isNaN"><a href="#③isNaN" class="headerlink" title="③isNaN"></a>③isNaN</h5><p>这个方法用来判断非数字，并且返回一个值，如果是数字返回的是false，如果不是数字返回的是true</p><p><img src="https://s2.loli.net/2022/06/13/f9pq4yndEbV7oP5.png" alt="image-20220613133052884"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userAge <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token function">isNan</span><span class="token punctuation">(</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false,21不是一个非数字</span><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">"andy"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNan</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,"andy"是一个非数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3、字符串型String"><a href="#2-4-3、字符串型String" class="headerlink" title="2.4.3、字符串型String"></a>2.4.3、字符串型String</h4><p>字符串型可以是引号中的任意文本，其语法为 “<strong>双引号</strong>” 和 “<strong>单引号</strong>’’</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我爱北京天安门~"</span><span class="token punctuation">;</span><span class="token comment">//使用双引号表示字符串</span><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">'我爱北京'</span><span class="token punctuation">;</span>  <span class="token comment">//使用单引号表示字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐<strong>使用单引号</strong>。</p><h5 id="①字符串引号嵌套"><a href="#①字符串引号嵌套" class="headerlink" title="①字符串引号嵌套"></a>①字符串引号嵌套</h5><p>JS可以用 <strong>单引号嵌套双引号</strong>，或者用 <strong>双引号嵌套单引号</strong>（<strong>外双内单，外单内双</strong>）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strMsg <span class="token operator">=</span><span class="token string">'我是一个“高富帅”'</span> <span class="token comment">//可以用 ' ' 包含 " "</span><span class="token keyword">var</span> strMsg2 <span class="token operator">=</span><span class="token string">"我是'高富帅'"</span> <span class="token comment">//可以用" "  包含  ''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="②字符串转义符"><a href="#②字符串转义符" class="headerlink" title="②字符串转义符"></a>②字符串转义符</h5><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n是newline</td></tr><tr><td>\ \</td><td>斜杠\</td></tr><tr><td>\ ’</td><td>’ 单引号</td></tr><tr><td>\ ‘’</td><td>‘’ 双引号</td></tr><tr><td>\ t</td><td>tab 缩进</td></tr><tr><td>\ b</td><td>空格，b是blank的意思</td></tr></tbody></table><h5 id="③字符串长度"><a href="#③字符串长度" class="headerlink" title="③字符串长度"></a>③字符串长度</h5><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通过字符串的length属性可以获取整个字符串的长度</span><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我是高富帅！"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//显示6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="④字符串的拼接"><a href="#④字符串的拼接" class="headerlink" title="④字符串的拼接"></a>④字符串的拼接</h5><ul><li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 &#x3D; 拼接之后的新字符串</strong></li><li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><p><strong>注意</strong>：字符串 + 任何类型 &#x3D;拼接之后的新字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1 字符串相加</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//hello World</span><span class="token comment">//2 数值字符串相加</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'100'</span> <span class="token operator">+</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//100100</span><span class="token comment">//3 数值字符串+数值</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1212</span><span class="token comment">//4 数值+数值</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>+</code> 号总结口诀：数值相加，字符相连</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span>  age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">'岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">'岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//引引加加，最终也是上面的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="⑤字符串拼接加强"><a href="#⑤字符串拼接加强" class="headerlink" title="⑤字符串拼接加强"></a>⑤字符串拼接加强</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pink老师'</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只要有字符就会相连</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// console.log('Pink老师age岁了');//这样不行,会输出 "Pink老师age岁了"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pink老师'</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pink老师18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pink老师'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Pink老师18岁啦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀&#x3D;&#x3D;“引引加加 ”，删掉数字&#x3D;&#x3D;变量写加中间</li></ul><h4 id="2-4-4、布尔型Boolean"><a href="#2-4-4、布尔型Boolean" class="headerlink" title="2.4.4、布尔型Boolean"></a>2.4.4、布尔型Boolean</h4><ul><li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li><li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 true当加法来看当1来看，flase当0来看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-4-5、undefined未定义"><a href="#2-4-5、undefined未定义" class="headerlink" title="2.4.5、undefined未定义"></a>2.4.5、undefined未定义</h4><ul><li>一个<strong>声明后没有被赋值</strong>的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果一个变量声明未赋值，就是undefined 未定义数据类型</span><span class="token keyword">var</span> str<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token keyword">var</span> variable <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token string">'Pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefinedPink</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>undefined 和 字符串 相加，会拼接字符串</li><li>undefined 和 数字相加，最后结果是<strong>NaN</strong></li></ol><h4 id="2-4-6、空值null"><a href="#2-4-6、空值null" class="headerlink" title="2.4.6、空值null"></a>2.4.6、空值null</h4><ul><li>一个声明变量给 null 值，里面存的值为空</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>space <span class="token operator">+</span> <span class="token string">'pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//nullpink</span>console<span class="token punctuation">.</span><span class="token function">llog</span><span class="token punctuation">(</span>space <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-4-7、typeof"><a href="#2-4-7、typeof" class="headerlink" title="2.4.7、typeof"></a>2.4.7、typeof</h4><ul><li>typeof 可用来获取检测变量的数据类型</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// 结果 number  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不同类型的返回值</p><table><thead><tr><th>类型</th><th>例</th><th>结果</th></tr></thead><tbody><tr><td>string</td><td>typeof “小白”</td><td>“string”</td></tr><tr><td>number</td><td>typeof 18</td><td>“number”</td></tr><tr><td>boolean</td><td>typeof true</td><td>“boolean”</td></tr><tr><td>undefined</td><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>typeof null</td><td>“object”</td></tr></tbody></table><h4 id="2-4-8、字面量"><a href="#2-4-8、字面量" class="headerlink" title="2.4.8、字面量"></a>2.4.8、字面量</h4><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8，9，10</li><li>字符串字面量：‘大前端’，‘后端’</li><li>布尔字面量：true、false</li></ul><p>通过控制台的颜色判断属于哪种数据类型</p><table><thead><tr><th>黑色</th><th>字符串</th></tr></thead><tbody><tr><td>蓝色</td><td>数值</td></tr><tr><td>灰色</td><td>undefined 和 null</td></tr></tbody></table><h3 id="2-5、数据类型转换"><a href="#2-5、数据类型转换" class="headerlink" title="2.5、数据类型转换"></a>2.5、数据类型转换</h3><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，<strong>就是把一种数据类型的变量转换成另外一种数据类型</strong>。</p><p>我们通常会实现3种方式的转换：</p><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h5 id="①转换为字符串型"><a href="#①转换为字符串型" class="headerlink" title="①转换为字符串型"></a>①转换为字符串型</h5><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num &#x3D; 1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num &#x3D; 1; alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num &#x3D;1; alert(num+“我是字符串”);</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.把数字型转换为字符串型 toString()  变量.toString()</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.强制转换</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>toString() 和 String() 使用方式不一样</li><li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一方式也称为隐士转换</li></ul><h5 id="②转换为数字型"><a href="#②转换为数字型" class="headerlink" title="②转换为数字型"></a>②转换为数字型</h5><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>parselnt(string)函数</strong></td><td>将string类型转成整数数值型</td><td>parselnt(‘78’)</td></tr><tr><td><strong>parseFloat(string)函数</strong></td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js 隐式转换(- * &#x2F;)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.parseInt()</span><span class="token keyword">var</span> age <span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的年龄'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//数字型18</span>consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3取整</span>consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.94'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3,不会四舍五入</span>consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//120,会去掉单位</span><span class="token comment">// 2.parseFloat()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3.14</span>consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//120,会去掉单位</span><span class="token comment">// 3.利用Number(变量)</span><span class="token keyword">var</span> str <span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 4.利用了算术运算 - * /   隐式转换</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">-</span> <span class="token string">'120'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>注意 parseInt 和 parseFloat ，这两个是重点</li><li>隐式转换是我们在进行算数运算的时候，JS自动转换了数据类型</li></ol><h5 id="③转换为布尔型"><a href="#③转换为布尔型" class="headerlink" title="③转换为布尔型"></a>③转换为布尔型</h5><table><thead><tr><th>方法</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table><ul><li>代表空，否定的值会被转换为false，如 ’ ’ , 0, NaN , null , undefined</li><li>其余的值都会被被转换为true</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6、运算符"><a href="#2-6、运算符" class="headerlink" title="2.6、运算符"></a>2.6、运算符</h3><p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号</p><p>JavaScript 中常用的运算符有：</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h4 id="2-6-1、算术运算符"><a href="#2-6-1、算术运算符" class="headerlink" title="2.6.1、算术运算符"></a>2.6.1、算术运算符</h4><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 20 &#x3D;30</td></tr><tr><td>-</td><td>减</td><td>10 - 20 &#x3D;-10</td></tr><tr><td>*</td><td>乘</td><td>10 * 20 &#x3D;200</td></tr><tr><td>&#x2F;</td><td>除</td><td>10 &#x2F; 20 &#x3D;0.5</td></tr><tr><td>%</td><td>取余数（取模）</td><td>返回出发的余数 9 % 2 &#x3D;1</td></tr></tbody></table><h4 id="2-6-2、浮点数的精度问题"><a href="#2-6-2、浮点数的精度问题" class="headerlink" title="2.6.2、浮点数的精度问题"></a>2.6.2、浮点数的精度问题</h4><p>浮点数值的最高精度是17位小数，但在进行算数计算时其精确度远远不如整数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">//结果不是0.3，0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果不是7，而是7.000000000000001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>所以不要直接判断两个浮点数是否相等</strong></p><h4 id="2-6-3、递增和递减运算符"><a href="#2-6-3、递增和递减运算符" class="headerlink" title="2.6.3、递增和递减运算符"></a>2.6.3、递增和递减运算符</h4><p>递增（++）</p><p>递减（- -）</p><p>放在变量前面时，我们称为前置递增(递减)运算符</p><p>放在变量后面时，我们称为后置递增(递减)运算符</p><p>注意：递增和递减运算符必须和变量配合使用。</p><h5 id="①前置递增运算符"><a href="#①前置递增运算符" class="headerlink" title="①前置递增运算符"></a>①前置递增运算符</h5><p>++num num &#x3D; num + 1</p><p>使用口诀:先自加，后返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alert</span> <span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先自加 10+1&#x3D;11，返回11，此时num&#x3D;11</p><h5 id="②后置递增运算符"><a href="#②后置递增运算符" class="headerlink" title="②后置递增运算符"></a>②后置递增运算符</h5><p>num ++ num &#x3D; num +1</p><p>使用口诀:<strong>先返回原值，后自加</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="③小结"><a href="#③小结" class="headerlink" title="③小结"></a>③小结</h5><ul><li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</li><li>单独使用时，运行结果相同，与其他代码联用时，执行结果会不同</li><li>开发时，大多使用后置递增&#x2F;减，并且代码独占一行</li></ul><h4 id="2-6-4、比较-关系-运算符"><a href="#2-6-4、比较-关系-运算符" class="headerlink" title="2.6.4、比较(关系)运算符"></a>2.6.4、比较(关系)运算符</h4><p>比较运算符是<strong>两个数据进行比较时所使用的运算符</strong>，比较运算后，会<strong>返回一个布尔值</strong>(true &#x2F; false)作为比较运算的结果。</p><table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1 &lt; 2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1 &gt; 2</td><td>false</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于号(大于或者等于)</td><td>2 &gt;&#x3D; 2</td><td>true</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于号(小于或者等于)</td><td>3 &lt;&#x3D; 2</td><td>false</td></tr><tr><td>&#x3D;&#x3D;</td><td>判等号(会转型)</td><td>37 &#x3D;&#x3D; 37</td><td>true</td></tr><tr><td>!&#x3D;</td><td>不等号</td><td>37 !&#x3D; 37</td><td>false</td></tr><tr><td>&#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;</td><td>全等 要求值和数据类型都一致</td><td>37 &#x3D;&#x3D;&#x3D; ‘37’</td><td>false</td></tr></tbody></table><h5 id="①-x3D-x3D-x3D-x3D-x3D-小结"><a href="#①-x3D-x3D-x3D-x3D-x3D-小结" class="headerlink" title="①&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 小结"></a>①&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 小结</h5><table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>把右边给左边</td></tr><tr><td>&#x3D;&#x3D;</td><td>判断</td><td>判断两边值是否相等(注意此时有隐士转换)</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-6-5、逻辑运算符"><a href="#2-6-5、逻辑运算符" class="headerlink" title="2.6.5、逻辑运算符"></a>2.6.5、逻辑运算符</h4><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值</p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称”与” and</td><td>true &amp;&amp; false</td></tr><tr><td>||</td><td>“逻辑或”，简称”或” or</td><td>true || false</td></tr><tr><td>！</td><td>“逻辑非”，简称”非” not</td><td>！true</td></tr></tbody></table><p>逻辑与：两边都是 true才返回 true，否则返回 false</p><p><img src="https://s2.loli.net/2022/06/13/kCX65HgWAY1NVv2.png" alt="image-20220613134730358"></p><p>逻辑或：两边都为 false 才返回 false，否则都为true</p><p><img src="https://s2.loli.net/2022/06/13/GfuwikcNqB4TUxE.png" alt="image-20220613134741800"></p><p>逻辑非：逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span><span class="token comment">//逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-6-5-1、短路运算-逻辑中断"><a href="#2-6-5-1、短路运算-逻辑中断" class="headerlink" title="2.6.5.1、短路运算(逻辑中断)"></a>2.6.5.1、短路运算(逻辑中断)</h5><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><p><strong>①逻辑与</strong></p><ul><li><p>语法：表达式1 &amp;&amp; 表达式2</p></li><li><p>如果第一个表达式的值为真，则返回表达式2</p></li><li><p>如果第一个表达式的值为假，则返回表达式1</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>②逻辑或</strong></p><ul><li>语法：表达式1 || 表达式2</li><li>如果第一个表达式的值为真，则返回表达式1</li><li>如果第一个表达式的值为假，则返回表达式2</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先返回在加，相当于 (123 || 0)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-6、赋值运算符"><a href="#2-6-6、赋值运算符" class="headerlink" title="2.6.6、赋值运算符"></a>2.6.6、赋值运算符</h4><p>概念：用来把数据赋值给变量的运算符。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>直接赋值</td><td>var usrName &#x3D; ‘我是值’</td></tr><tr><td>+&#x3D; ，-&#x3D;</td><td>加，减一个数后再赋值</td><td>var age &#x3D; 10； age+&#x3D;5；&#x2F;&#x2F;15</td></tr><tr><td>*&#x3D;，&#x2F;&#x3D;，%&#x3D;</td><td>成，除，取模后再赋值</td><td>var age &#x3D; 2; age*&#x3D;5; &#x2F;&#x2F;10</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>age <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于 age = age + 5;</span>age <span class="token operator">-=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于 age = age - 5;</span>age <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 age = age * 10;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-7、运算符优先级"><a href="#2-6-7、运算符优先级" class="headerlink" title="2.6.7、运算符优先级"></a>2.6.7、运算符优先级</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>++ – ！</td></tr><tr><td>3</td><td>算数运算符</td><td><strong>先 * &#x2F; 后 + -</strong></td></tr><tr><td>4</td><td>关系运算符</td><td><strong>&gt;, &gt;&#x3D; , &lt; , &lt;&#x3D;</strong>,</td></tr><tr><td>5</td><td>相等运算符</td><td>，！&#x3D;，&#x3D;，！&#x3D;&#x3D;</td></tr><tr><td>6</td><td>逻辑运算符</td><td><strong>先 &amp;&amp; 后 ||（先与后或）</strong></td></tr><tr><td>7</td><td>赋值运算符</td><td>&#x3D;</td></tr><tr><td>8</td><td>逗号运算符</td><td>，</td></tr></tbody></table><ol><li>一元运算符里面的<strong>逻辑非</strong>优先级很高</li><li><strong>逻辑与</strong> 比 <strong>逻辑或</strong> 优先级高</li></ol><h3 id="2-7、流程控制"><a href="#2-7、流程控制" class="headerlink" title="2.7、流程控制"></a>2.7、流程控制</h3><p>流程控制主要有三种结构，分别是顺序结构、分支结构和循环结构，这三种结构代表三种代码执行的顺序</p><h4 id="2-7-1、分支结构"><a href="#2-7-1、分支结构" class="headerlink" title="2.7.1、分支结构"></a>2.7.1、分支结构</h4><p>JS 语言提供了两种分支结构语句：<strong>JS 语句</strong> <strong>switch语句</strong></p><h5 id="①if语句"><a href="#①if语句" class="headerlink" title="①if语句"></a>①if语句</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 条件成立执行代码，否则什么也不做</span><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//条件成立执行的代码语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>案例：进入网吧</p><p>弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> usrAge <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的年龄:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>usrAge <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您的年龄合法，欢迎来到老子网吧享受学习的乐趣！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="②if-else-语句"><a href="#②if-else-语句" class="headerlink" title="②if else 语句"></a>②if else 语句</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 条件成立，执行if里面代码，否则执行else里面的代码</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//[如果]条件成立执行的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//[否则]执行的代码</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="③if-else-if-语句"><a href="#③if-else-if-语句" class="headerlink" title="③if else if 语句"></a>③if else if 语句</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  语句<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token comment">//上述条件都不成立执行此处代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-2、三元表达式"><a href="#2-7-2、三元表达式" class="headerlink" title="2.7.2、三元表达式"></a>2.7.2、三元表达式</h4><ul><li>语法结构 : 表达式1 ? 表达式2 : 表达式3</li><li>执行思路</li></ul><p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p><p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p><p><strong>案例：数字补0</strong></p><p>用户输入数字，如果数字小于10，则在前面补0，比如01，09，</p><p>如果数字大于10，则不需要补，比如20</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> figuer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入0~59之间的一个数字'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> figuer <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> figuer <span class="token operator">:</span> figue        <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-7-3、switch"><a href="#2-7-3、switch" class="headerlink" title="2.7.3、switch"></a>2.7.3、switch</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>     <span class="token comment">//表达式等于 value1 时要执行的代码</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>     <span class="token comment">//表达式等于value2 时要执行的代码</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>     <span class="token comment">//表达式不等于任何一个value时要执行的代码</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>switch ：开关 转换 ， case ：小例子 选项</li><li>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</li><li>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</li><li>switch 表达式的值会与结构中的 case 的值做比较</li><li>如果存在匹配全等(&#x3D;&#x3D;&#x3D;) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</li><li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li><li>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”</span>        <span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入查询的苹果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">'苹果'</span><span class="token operator">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'苹果的价格为3.5元/千克'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'香蕉'</span><span class="token operator">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'香蕉的价格为3元/千克'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'没有这种水果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、断点调试"><a href="#3、断点调试" class="headerlink" title="3、断点调试"></a>3、断点调试</h2><ol><li><p>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点(在行数点一下)</p></li><li><p>刷新浏览器</p></li><li><p>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用</p></li><li><p>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化</p></li></ol><h2 id="4、循环"><a href="#4、循环" class="headerlink" title="4、循环"></a>4、循环</h2><h3 id="4-1、for循环"><a href="#4-1、for循环" class="headerlink" title="4.1、for循环"></a>4.1、for循环</h3><p>在程序中，一组被重复执行的语句被称之为<strong>循环体</strong>，能否继续重复执行，取决于循环的<strong>终止条件</strong>。由循环体及循环的终止条件组成的语句，被称之为<strong>循环语句</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>操作表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//循环体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.输入10句晚安</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//基本写法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span>  <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'娘子晚安哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 用户输入次数</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入次数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> num <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'娘子晚安哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.求1-100之间所有整数的累加和</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 求1-100所以的整数和</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、while循环"><a href="#4-3、while循环" class="headerlink" title="4.3、while循环"></a>4.3、while循环</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//循环体代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行思路：</p><ul><li><p>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p></li><li><p>执行循环体代码</p></li><li><p>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</p></li></ul><p><strong>注意</strong>：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会称为死循环</li><li>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</li></ul><p><strong>1.打印人的一生</strong></p><p>从1岁到99岁</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    age<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'您今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.计算 1 ~ 100 之间所有整数的和</strong></p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var figure &#x3D; 1;        var sum &#x3D; 0;        while (figure &lt;&#x3D; 100) &#123;            sum +&#x3D; figure;            figure++;        &#125;        console.log(&#39;1-100的整数和为&#39; + sum);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4、do-while循环"><a href="#4-4、do-while循环" class="headerlink" title="4.4、do while循环"></a>4.4、do while循环</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环体代码-条件表达式为true的时候重复执行循环一代码</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行思路：</p><ol><li><p>先执行一次循环体代码</p></li><li><p>再执行表达式，如果结果为true，则继续执行循环体代码，如果为false，则退出循环，继续执行后面的代码</p></li><li><p>先执行再判断循环体，所以dowhile循环语句至少会执行一次循环体代码</p></li></ol><p>需求：弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> love <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'你爱我吗？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>love <span class="token operator">!=</span> <span class="token string">'我爱你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5、continue-关键字"><a href="#4-5、continue-关键字" class="headerlink" title="4.5、continue 关键字"></a>4.5、continue 关键字</h3><p>continue 关键字用于<strong>立即跳出本次循环，继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次）。</p><h3 id="4-6、break-关键字"><a href="#4-6、break-关键字" class="headerlink" title="4.6、break 关键字"></a>4.6、break 关键字</h3><p>break 关键字用于<strong>立即跳出整个循环</strong></p><h2 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h2><p>数组(Array)是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//普通变量一次只能存储一个值</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组一次可以存储多个值</span><span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1、创建数组"><a href="#5-1、创建数组" class="headerlink" title="5.1、创建数组"></a>5.1、创建数组</h3><p>JavaScript 中创建数组有两种方式：</p><ul><li>利用 new 创建数组</li><li>利用数组字面量创建数组</li></ul><h5 id="①利用-new-创建数组"><a href="#①利用-new-创建数组" class="headerlink" title="①利用 new 创建数组"></a>①利用 new 创建数组</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个新的空数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这种方式暂且了解，等学完对象再看</li><li>注意 <code>Array()</code>，A要大写</li></ul><h5 id="②利用数组字面量创建数组"><a href="#②利用数组字面量创建数组" class="headerlink" title="②利用数组字面量创建数组"></a>②利用数组字面量创建数组</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.利用数组字面量方式创建空的数组 </span><span class="token keyword">var</span> 数组名 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 2.使用数组字面量方式创建带初始值的数组</span><span class="token keyword">var</span> 数组名 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token string">'小黄'</span><span class="token punctuation">,</span><span class="token string">'瑞奇'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 3.数组中可以存放任意类型的数据，例如字符串，数字，布尔值等</span><span class="token keyword">var</span> arrStus <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'小白'</span>，<span class="token number">12</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">28.9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组的字面量是方括号 <code>[]</code></li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul><h3 id="5-2、数组的索引（下标）"><a href="#5-2、数组的索引（下标）" class="headerlink" title="5.2、数组的索引（下标）"></a>5.2、数组的索引（下标）</h3><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义数组</span><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取数组中的第2个元素</span><span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3遍历数组"><a href="#5-3遍历数组" class="headerlink" title="5.3遍历数组"></a>5.3遍历数组</h3><p>我们可以通过 for 循环索引遍历数组中的每一项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 数组索引访问数组中的元素</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// red</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// green</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// blue</span><span class="token comment">// for循环遍历数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4、数组的长度"><a href="#5-4、数组的长度" class="headerlink" title="5.4、数组的长度"></a>5.4、数组的长度</h3><p>使用“数组名.length”可以访问数组元素的数量（数组长度）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li>此处数组的长度是<strong>数组元素的个数</strong> ，不要和<strong>数组的索引号</strong>混淆</li><li>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</li></ul><h4 id="5-5、案例"><a href="#5-5、案例" class="headerlink" title="5.5、案例"></a>5.5、案例</h4><p><strong>1.请将 [“关羽”,“张飞”,“马超”,“赵云”,“黄忠”,“刘备”,“姜维”]; 数组里的元素依次打印到控制台</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"关羽"</span><span class="token punctuation">,</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token string">"马超"</span><span class="token punctuation">,</span><span class="token string">"赵云"</span><span class="token punctuation">,</span><span class="token string">"黄忠"</span><span class="token punctuation">,</span><span class="token string">"刘备"</span><span class="token punctuation">,</span><span class="token string">"姜维"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 遍历  从第一个到最后一个</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6、数组中新增元素"><a href="#5-6、数组中新增元素" class="headerlink" title="5.6、数组中新增元素"></a>5.6、数组中新增元素</h3><h5 id="①通过修改-length-长度新增数组元素"><a href="#①通过修改-length-长度新增数组元素" class="headerlink" title="①通过修改 length 长度新增数组元素"></a>①通过修改 length 长度新增数组元素</h5><ul><li>可以通过修改 length 长度来实现数组扩容的目的</li><li>length 属性是可读写的</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 <strong>undefined</strong></p><h5 id="②通过修改数组索引新增数组元素"><a href="#②通过修改数组索引新增数组元素" class="headerlink" title="②通过修改数组索引新增数组元素"></a>②通过修改数组索引新增数组元素</h5><ul><li>可以通过修改数组索引的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li><li>这种方式也是我们最常用的一种方式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hotpink'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-7、数组中新增元素"><a href="#5-7、数组中新增元素" class="headerlink" title="5.7、数组中新增元素"></a>5.7、数组中新增元素</h3><p><strong>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</strong></p><ol><li>使用循环来追加数组。</li><li>声明一个空数组 arr。</li><li>循环中的计数器 i 可以作为数组元素存入。</li></ol><p>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组</strong></p><ol><li>声明一个新的数组用于存放新数据。</li><li>遍历原来的数组，找出大于等于 10 的元素。</li><li>依次追加给新数组 newArr。</li></ol><p>实现代码1：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 定义一个变量 用来计算 新数组的索引号</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 给新数组</span>        newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 索引号 不断自加</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现代码2：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 给新数组</span>        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8、删除指定数组元素"><a href="#5-8、删除指定数组元素" class="headerlink" title="5.8、删除指定数组元素"></a>5.8、删除指定数组元素</h3><p><strong>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 空数组的默认的长度为 0 </span><span class="token comment">// 定义一个变量 i 用来计算新数组的索引号</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 找出大于 10 的数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 给新数组</span>        <span class="token comment">// 每次存入一个值，newArr长度都会 +1  </span>        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-9、翻转数组"><a href="#5-9、翻转数组" class="headerlink" title="5.9、翻转数组"></a>5.9、翻转数组</h3><p><strong>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 把旧数组索引号的第4个取过来(arr.length - 1),给新数组索引号第0个元素(newArr.length)</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'purple'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-10、数组排序"><a href="#5-10、数组排序" class="headerlink" title="5.10、数组排序"></a>5.10、数组排序</h3><p>冒泡排序</p><p>将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//外层循环管趟数，5个数共交换4躺</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//里层循环管每一趟交换的次数</span>        <span class="token comment">//前一个和后面一个数组元素相比较</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium IDE</title>
      <link href="/liangjunyi.github.io/2022/06/09/selenium-ide/"/>
      <url>/liangjunyi.github.io/2022/06/09/selenium-ide/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium-IDE"><a href="#Selenium-IDE" class="headerlink" title="Selenium IDE"></a>Selenium IDE</h1><h2 id="1-Video"><a href="#1-Video" class="headerlink" title="1. Video"></a>1. Video</h2><p><img src="https://s2.loli.net/2022/06/10/v2bTi7tPIOFBNLW.gif" alt="1.auto_test"></p><h2 id="2-Description"><a href="#2-Description" class="headerlink" title="2. Description"></a>2. Description</h2><ul><li>Using a localhost web project as testing target, this project implement by Django frame.</li><li>This web request user write a table and submit.</li><li>This project connect to the local MySQL database to store the info.</li><li>Using Selenium IDE to do the auto testing.<ul><li>Login test<ul><li>positive</li><li>negative<ul><li>not give username</li></ul></li></ul></li><li>Write table test<ul><li>positive</li><li>negative<ul><li>not give order name</li></ul></li></ul></li></ul></li></ul><blockquote><p>Because for auto testing, temporarily close the verify-code part.  </p></blockquote><h2 id="3-Selenium-IDE"><a href="#3-Selenium-IDE" class="headerlink" title="3. Selenium IDE"></a>3. Selenium IDE</h2><p><img src="https://s2.loli.net/2022/06/10/TlL6Dbj7hWKG9Qv.png" alt="image-20220610141405101"></p><p><img src="https://s2.loli.net/2022/06/10/1YNlpySdxAavne9.png" alt="image-20220610141415639"></p><h2 id="4-Python-code"><a href="#4-Python-code" class="headerlink" title="4. Python code"></a>4. Python code</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Generated by Selenium IDE</span><span class="token keyword">import</span> pytest<span class="token keyword">import</span> time<span class="token keyword">import</span> json<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>desired_capabilities <span class="token keyword">import</span> DesiredCapabilities<span class="token keyword">class</span> <span class="token class-name">TestTableFillpositive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">setup_method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span><span class="token builtin">vars</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">teardown_method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_tableFillpositive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8001/login/"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"LAY-user-login-username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"LAY-user-login-username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"LAY-user-login-password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"LAY-user-login-password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"LAY-user-login-vercode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"LAY-user-login-vercode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"0644"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"loginButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>visibility_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">".layui-logo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>LINK_TEXT<span class="token punctuation">,</span> <span class="token string">"需求管理"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>LINK_TEXT<span class="token punctuation">,</span> <span class="token string">"需求申请"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">".layui-select-title > .layui-input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">"dd:nth-child(2)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">"tr:nth-child(2) > td:nth-child(7)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_sys"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_sys"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">".layui-unselect:nth-child(4) > .layui-anim"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"order_desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"submitBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python test </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit test</title>
      <link href="/liangjunyi.github.io/2022/06/08/python-test-1/"/>
      <url>/liangjunyi.github.io/2022/06/08/python-test-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-test-1"><a href="#Python-test-1" class="headerlink" title="Python test (1)"></a>Python test (1)</h1><h2 id="Integration-test"><a href="#Integration-test" class="headerlink" title="Integration test"></a>Integration test</h2><p>Integration testing exercises two or more parts of an application at once, including the interactions between the parts, to determine if they function as intended. This type of testing identifies defects in the interfaces between disparate parts of a codebase as they invoke each other and pass data between themselves.</p><h2 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h2><p>A unit test is a smaller test, one that checks that a single component operates in the right way. A unit test helps you to isolate what is broken in your application and fix it faster.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s write a code to calculate the volume of a cube in Python.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cuboid_volume</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>l<span class="token operator">*</span>l<span class="token operator">*</span>l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">length <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2j</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"The volume of cuboid:"</span><span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">(</span>length<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">The volume of cuboid<span class="token punctuation">:</span> <span class="token number">8</span>The volume of cuboid<span class="token punctuation">:</span> <span class="token number">1.3310000000000004</span>The volume of cuboid<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">15.625</span>The volume of cuboid<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">8j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span>67e1c37a435f<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>      <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>     <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"The volume of cuboid:"</span><span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">(</span>length<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>f50464fd88da<span class="token operator">></span> <span class="token keyword">in</span> cuboid_volume<span class="token punctuation">(</span>l<span class="token punctuation">)</span>      <span class="token number">1</span> <span class="token keyword">def</span> <span class="token function">cuboid_volume</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>l<span class="token operator">*</span>l<span class="token operator">*</span>l<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> can<span class="token string">'t multiply sequence by non-int of type '</span><span class="token builtin">str</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The above output should give you some intuition about the importance of having a unit test in place for your code. Now there are three things which are certainly incorrect in the above code:</p><ul><li>First, the volume of cuboid being negative,</li><li>Second, the volume of the cuboid is a complex number,</li><li>Finally, the code resulting in a <code>TypeError</code> since you cannot multiply a string, which is a non-int.</li></ul><p>Let’s say the above code file name is <code>cuboid_volume.py</code>, then your unit test code name could be <code>cuboid_volume_test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unittest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The first function you will define is <code>test_volume</code>, which will check whether the output your <code>cuboid_volume</code> gives is equal to what you expect. To achieve this, you will make use of the <code>assertAlmostEqual</code> method.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestCuboid</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">166.375</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After running, we get the result.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>001sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The test ran successfully and returned, <code>OK</code>, which means the cuboid_volume function works as you would expect it too.</p><p>Let’s see what happens when one of the <code>assertAlmostEqual</code> methods fails.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestCuboid</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#166.375</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Notice that the last assert statement has been modified.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>003sFAILED <span class="token punctuation">(</span>failures<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Launching unittests <span class="token keyword">with</span> arguments python <span class="token operator">-</span>m unittest cuboid_volume_test<span class="token punctuation">.</span>TestCuboid<span class="token punctuation">.</span>test_volume <span class="token keyword">in</span> D<span class="token punctuation">:</span>\python\easywriteFailureTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:\python\easywrite\cuboid_volume_test.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> test_volume    self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#166.375</span>AssertionError<span class="token punctuation">:</span> <span class="token number">166.375</span> <span class="token operator">!=</span> <span class="token number">0</span> within <span class="token number">7</span> places <span class="token punctuation">(</span><span class="token number">166.375</span> difference<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Well, from the above output, you can observe that the last assert statement resulted in an <code>AssertionError</code>, hence a unit test failure. Python’s unit test module shows you the reason for the failure, along with the number of failures your code has.</p><p>Now let’s explore another assert method, i.e., <code>assertRaises</code>, which will help you in finding out whether your function <code>cuboid_volume</code> handles the input values correctly.</p><p>Let’s say you want to test whether you function <code>cuboid_volume</code> handles the class or type of input, for example, if you pass a string as an input will it handle that input either as an exception or with an if condition since the length of the cuboid can never be a string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestCuboid</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># self.assertAlmostEqual(cuboid_volume(5.5),0) #166.375</span>    <span class="token keyword">def</span> <span class="token function">test_input_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>007sFAILED <span class="token punctuation">(</span>failures<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>FailureTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:\python\easywrite\cuboid_volume_test.py"</span><span class="token punctuation">,</span> line <span class="token number">12</span><span class="token punctuation">,</span> <span class="token keyword">in</span> test_input_value    self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>AssertionError<span class="token punctuation">:</span> TypeError <span class="token keyword">not</span> raised by cuboid_volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So from the above output, it is evident that your code <code>volume_cuboid.py</code> doesn’t take care of the input being passed to it properly.</p><p>Let’s add a condition in the <code>volume_cuboid.py</code> to check whether the input or length of the cuboid is a boolean or a string and raise an error.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cuboid_volume</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"The length of cuboid can only be a valid integer or a float"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>l<span class="token operator">*</span>l<span class="token operator">*</span>l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>001sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>There are a lot of <code>assert</code> methods in the unit test module of Python, which could be leveraged for your testing purposes.</p><p>Below are some of the assert methods that exist in the unit test module.</p><table><thead><tr><th align="left">Method</th><th align="left">Checks that</th><th align="left">New in</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual"><code>assertAlmostEqual(a, b)</code></a></td><td align="left"><code>round(a-b, 7) == 0</code></td><td align="left"></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual"><code>assertNotAlmostEqual(a, b)</code></a></td><td align="left"><code>round(a-b, 7) != 0</code></td><td align="left"></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater"><code>assertGreater(a, b)</code></a></td><td align="left"><code>a &gt; b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual"><code>assertGreaterEqual(a, b)</code></a></td><td align="left"><code>a &gt;= b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess"><code>assertLess(a, b)</code></a></td><td align="left"><code>a &lt; b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual"><code>assertLessEqual(a, b)</code></a></td><td align="left"><code>a &lt;= b</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex"><code>assertRegex(s, r)</code></a></td><td align="left"><code>r.search(s)</code></td><td align="left">3.1</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex"><code>assertNotRegex(s, r)</code></a></td><td align="left"><code>not r.search(s)</code></td><td align="left">3.2</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual"><code>assertCountEqual(a, b)</code></a></td><td align="left"><em>a</em> and <em>b</em> have the same elements in the same number, regardless of their order.</td><td align="left">3.2</td></tr></tbody></table><p>To know in detail about the <code>assert</code> methods, check out Python’s <a href="https://docs.python.org/3/library/unittest.html">official documentation</a>.</p><p>You could also learn about them with the help of the <code>Pydoc</code> module, which is similar to a <code>help</code> function in Python. A demonstration of how you could use the Pydoc module to read about the <code>assertCountEqual</code> method’s documentation is shown below.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m pydoc unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">.</span>assertCountEqual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">Help on function assertCountEqual <span class="token keyword">in</span> unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">:</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">.</span>assertCountEqual <span class="token operator">=</span> assertCountEqual<span class="token punctuation">(</span>self<span class="token punctuation">,</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>    Asserts that two iterables have the same elements<span class="token punctuation">,</span> the same number of    times<span class="token punctuation">,</span> without regard to order<span class="token punctuation">.</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>Counter<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         Counter<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     Example<span class="token punctuation">:</span>        <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> compare equal<span class="token punctuation">.</span>        <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> compare unequal<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is important to know that your test methods inside the Class <code>TestCuboid</code> should start with a keyword <code>test</code>. Let’s see what happens when you start your test method with some random name without using the <code>test</code> naming convention.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cuboid_volume <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestCuboid</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># self.assertAlmostEqual(cuboid_volume(5.5),0) #166.375</span>    <span class="token keyword">def</span> <span class="token function">test_input_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>003sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>As you can see by changing the <code>test_volume</code> method name to <code>volume</code>, only 1 test was run, i.e., <code>test_input_value</code>. Hence, it is important to name your testing methods with a <code>test</code> keyword at the beginning.</p><p>Let’s now run the testing script within the jupyter lab. To achieve this, you would first define the testing script in the jupyter lab, as shown below.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cuboid_volume</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"The length of cuboid can only be a valid integer or a float"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>l<span class="token operator">*</span>l<span class="token operator">*</span>l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestCuboid</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># self.assertAlmostEqual(cuboid_volume(5.5),0) #166.375</span>    <span class="token keyword">def</span> <span class="token function">test_input_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then, you will use the <code>unittest.main()</code> method to run the testing script, you can pass several arguments to the below method, out of which one is <code>verbosity level</code>.</p><p>Let’s experiment with different verbosity levels and see how it changes the output description.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span>argv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>verbosity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> exit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">2</span> tests <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>000sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span>argv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>verbosity<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> exit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">2</span> tests <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>002sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span>argv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>verbosity<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> exit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_input_value <span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>TestCuboid<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> oktest_volume <span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>TestCuboid<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ok<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">2</span> tests <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>002sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lastly, let’s modify the final <code>assertAlmostEqual</code> in the <code>test_volume</code> method and analyze how the verbosity level 2 will show the method failure.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestCuboid</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># self.assertAlmostEqual(cuboid_volume(5.5),0) #166.375</span>    <span class="token keyword">def</span> <span class="token function">test_input_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span>cuboid_volume<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span>argv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>verbosity<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> exit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_input_value <span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>TestCuboid<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> oktest_volume <span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>TestCuboid<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FAIL<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>FAIL<span class="token punctuation">:</span> test_volume <span class="token punctuation">(</span>__main__<span class="token punctuation">.</span>TestCuboid<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;ipython-input-11-84853a2fa5d7>"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> test_volume    self<span class="token punctuation">.</span>assertAlmostEqual<span class="token punctuation">(</span>cuboid_volume<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>AssertionError<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token number">1</span> within <span class="token number">7</span> places <span class="token punctuation">(</span><span class="token number">1</span> difference<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">2</span> tests <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>002sFAILED <span class="token punctuation">(</span>failures<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>From the above outputs, the following conclusions can be made:</p><ul><li>Verbosity level 0 just shows how many tests were run, i.e., 2 tests along with the time it took to run them,</li><li>Verbosity level 1 add two dots <code>..</code> which signifies two tests were executed,</li><li>Verbosity level 2 shows the detailed method names which were run along with their state <code>ok</code> or <code>FAIL</code>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python test </tag>
            
            <tag> Unit test </tag>
            
            <tag> Integration test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 SAT Problem</title>
      <link href="/liangjunyi.github.io/2022/06/07/2-sat-problem/"/>
      <url>/liangjunyi.github.io/2022/06/07/2-sat-problem/</url>
      
        <content type="html"><![CDATA[<h1 id="2-SAT-Problem"><a href="#2-SAT-Problem" class="headerlink" title="2 SAT Problem"></a>2 SAT Problem</h1><h2 id="1-What-is-SAT-Problem"><a href="#1-What-is-SAT-Problem" class="headerlink" title="1. What is SAT Problem"></a>1. What is SAT Problem</h2><p>Boolean Satisfiability or simply <strong>SAT</strong> is the problem of determining if a Boolean formula is satisfiable or unsatisfiable. </p><ul><li><strong>Satisfiable :</strong> If the Boolean variables can be assigned values such that the formula turns out to be TRUE, then we say that the formula is satisfiable.</li><li><strong>Unsatisfiable :</strong> If it is not possible to assign such values, then we say that the formula is unsatisfiable.</li></ul><p>Examples:</p><ul><li>$F&#x3D;A\land \bar{B}$  is satisfiable, because A &#x3D; TRUE and B &#x3D; FALSE makes F &#x3D; TRUE.</li><li>$F &#x3D; A \land \bar{A}$ is unsatisfiable, because <ul><li>if A &#x3D; True, $\bar{A}$ &#x3D; False,  they and together, F &#x3D; False</li><li>if A &#x3D; False, $\bar{A}$ &#x3D; True,  they and together, F &#x3D; False</li></ul></li></ul><p>Symbol explanation: </p><ul><li>A is one term, it can be True or False</li><li>$\bar{A}$ is not A, it is opposite to A’s Boolean value</li><li>$\land$ is and gate</li><li>$\lor$ is or gate</li></ul><h2 id="2-What-is-Conjunctive-Normal-Form-CNF"><a href="#2-What-is-Conjunctive-Normal-Form-CNF" class="headerlink" title="2. What is Conjunctive Normal Form (CNF)"></a>2. What is Conjunctive Normal Form (CNF)</h2><p>To understand Problem of 2-Satisfiability better, first let us see what is Conjunctive Normal Form (CNF) </p><p><strong>CNF :</strong> CNF is a conjunction (AND) of clauses, where every clause is a disjunction (OR).</p><p>Example:<br>$$<br>F&#x3D; (A_1 \lor B_1 \lor C_1 \lor …) \land (A_2 \lor B_2\lor C_2 \lor …) \land (A_3 \lor B_3\lor C_3 \lor …) \land …… \land (A_m \lor B_m\lor C_m \lor …)<br>$$</p><h2 id="3-What-is-2-SAT-problem"><a href="#3-What-is-2-SAT-problem" class="headerlink" title="3. What is 2-SAT problem"></a>3. What is 2-SAT problem</h2><p>Thus, Problem of 2-Satisfiability can be stated as:<br><strong>Given CNF with each clause having only 2 terms, is it possible to assign such values to the variables so that the CNF is TRUE?</strong></p><p>Example:</p><ul><li><p>$$<br>F&#x3D; (x_1 \lor x_2 ) \land (x_2 \lor \bar{x}_1) \land (\bar{x}_1 \lor \bar{x}_2)<br>$$</p><p>The given expression is satisfiable. </p><p>for x1 &#x3D; FALSE, x2 &#x3D; TRUE</p></li><li><p>$$<br>F&#x3D; (x_1 \lor x_2 ) \land (x_2 \lor \bar{x}_1)\land (x_1 \lor \bar{x}_2) \land (\bar{x}_1 \lor \bar{x}_2)<br>$$</p><p>The given expression is unsatisfiable.</p><p>for all possible combinations of x1 and x2</p></li></ul><h2 id="4-How-to-solve-the-2-SAT-problem4"><a href="#4-How-to-solve-the-2-SAT-problem4" class="headerlink" title="4. How to solve the 2-SAT problem4"></a>4. How to solve the 2-SAT problem4</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare:"></a>Prepare:</h3><p>For the CNF value to come TRUE, value of every clause should be TRUE.</p><p>Let one of the clause be ($A\lor B$) &#x3D; True</p><ul><li>if A&#x3D;0, B must be 1, ($\bar{A} \Rightarrow B  $)</li><li>if B&#x3D;0, A must be 1, ($\bar{B} \Rightarrow A  $)</li></ul><p>Then we create an Implication Graph which has 2 edges for every clause of the CNF.</p><p>($A\lor B$) expressed in Graph as $edge(\bar{A} \Rightarrow B  )$ , $edge(\bar{B} \Rightarrow A  )$</p><p>So for a Boolean formula with <code>m</code> clauses, we have 2 edges for every clause in Graph. So <code>2m</code> edges in total.</p><h3 id="Case"><a href="#Case" class="headerlink" title="Case:"></a>Case:</h3><blockquote><p>Case 1: If $edge(X\rightarrow \bar{X})$ exists in the graph</p><p>It means if X&#x3D;True, $\bar{X}$ &#x3D; True</p><p>But if X &#x3D; False, can not decide $\bar{X}$</p></blockquote><blockquote><p>Case 2: If $edge(\bar{X}\rightarrow X)$ exists in the graph</p><p>It means if $\bar{X}$ &#x3D;True, X &#x3D; True</p><p>But if $\bar{X}$ &#x3D; False, can not decide X</p></blockquote><blockquote><p>Case 3: If $edge(\bar{X}\rightarrow X) \space and \space edge(X\rightarrow \bar{X})$ exists in the graph at same time</p><p>One edge requires X to be TRUE and the other one requires X to be FALSE.</p><p>Thus, there is no possible assignment in such a case.</p></blockquote><p><strong>CONCLUSION:</strong> If any two variables $X$ and $\bar{X}$ are on a cycle i.e. $edge(\bar{X}\rightarrow X) \space and \space edge(X\rightarrow \bar{X})$  both exists, then the CNF is unsatisfiable. Otherwise, there is a possible assignment and the CNF is satisfiable. </p><p><strong>CONCLUSION FROM IMPLEMENTATION POINT OF VIEW:</strong><br>If both $X$ and $\bar{X}$ lie in the same SCC (Strongly Connected Component), the CNF is unsatisfiable. </p><h3 id="Strongly-Connected-Component"><a href="#Strongly-Connected-Component" class="headerlink" title="Strongly Connected Component:"></a>Strongly Connected Component:</h3><p>A Strongly Connected Component of a directed graph has nodes such that every node can be reach from every another node in that SCC. </p><p>3 SCCs here</p><p><img src="https://s2.loli.net/2022/06/07/moijtTV9zuYg4fD.png" alt="image-20220607145236240"></p><h2 id="5-Code-for-solve-2-SAT-problem-implement-by-Python"><a href="#5-Code-for-solve-2-SAT-problem-implement-by-Python" class="headerlink" title="5. Code for solve 2-SAT problem implement by Python"></a>5. Code for solve 2-SAT problem implement by Python</h2><h3 id="Total-code"><a href="#Total-code" class="headerlink" title="Total code"></a>Total code</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timetest_data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'2satBIG.cnf'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 把末尾的'\n'删掉</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token number">0</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> rec <span class="token keyword">in</span> test_data<span class="token punctuation">:</span>    rec<span class="token operator">=</span>rec<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    junk_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    substrs <span class="token operator">=</span> rec<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> substrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'p'</span> <span class="token keyword">and</span>  substrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'cnf'</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        m<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">## record has to start with a number or a minus sign</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>rec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        substrs <span class="token operator">=</span> rec<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    num_int <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>                    <span class="token keyword">elif</span> num <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                        B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    num_int <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>                        B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error converting"</span><span class="token punctuation">,</span> rec<span class="token punctuation">)</span>MAX <span class="token operator">=</span> <span class="token number">1000000</span>adj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>adjInv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    adj<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    adjInv<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAXvisitedInv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAXs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>scc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAXcount <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_edge_inv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    adjInv<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dfs_first</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dfs_first<span class="token punctuation">(</span>adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token comment"># print("stack: " + str(s))</span><span class="token keyword">def</span> <span class="token function">dfs_second</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> visitedInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    visitedInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adjInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dfs_second<span class="token punctuation">(</span>adjInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token keyword">def</span> <span class="token function">is_2_sat</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            dfs_first<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        top <span class="token operator">=</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> visitedInv<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">:</span>            dfs_second<span class="token punctuation">(</span>top<span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># print("scc: " + str(scc[0:20]))</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> scc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> scc<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The given expression is unsatisfiable"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The given expression is satisfiable"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> scc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> scc<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>            <span class="token comment"># print("x" + str(i) + ": True")</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>            <span class="token comment"># print("x" + str(i) + ": False")</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># for i in range(100):</span>    is_2_sat<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Part-1-read-CNF-file"><a href="#Part-1-read-CNF-file" class="headerlink" title="Part 1, read CNF file"></a>Part 1, read CNF file</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'2satBIG.cnf'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 把末尾的'\n'删掉</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token number">0</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> rec <span class="token keyword">in</span> test_data<span class="token punctuation">:</span>    rec<span class="token operator">=</span>rec<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    junk_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    substrs <span class="token operator">=</span> rec<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> substrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'p'</span> <span class="token keyword">and</span>  substrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'cnf'</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        m<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">## record has to start with a number or a minus sign</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>rec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        substrs <span class="token operator">=</span> rec<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    num_int <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>                    <span class="token keyword">elif</span> num <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                        B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    num_int <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>substrs<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>                        B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error converting"</span><span class="token punctuation">,</span> rec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Part-2-check-2-SAT-Problem"><a href="#Part-2-check-2-SAT-Problem" class="headerlink" title="Part 2, check 2 SAT-Problem"></a>Part 2, check 2 SAT-Problem</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">MAX <span class="token operator">=</span> <span class="token number">1000000</span>adj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>adjInv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    adj<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    adjInv<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAXvisitedInv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAXs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>scc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAXcount <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_edge_inv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    adjInv<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dfs_first</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dfs_first<span class="token punctuation">(</span>adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dfs_second</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> visitedInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    visitedInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adjInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dfs_second<span class="token punctuation">(</span>adjInv<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token comment"># m number of clauses</span><span class="token comment"># n number of terms</span><span class="token comment"># A all terms in first position</span><span class="token comment"># B all terms in second position</span><span class="token keyword">def</span> <span class="token function">is_2_sat</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            dfs_first<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        top <span class="token operator">=</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> visitedInv<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">:</span>            dfs_second<span class="token punctuation">(</span>top<span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> scc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> scc<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The given expression is unsatisfiable"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The given expression is satisfiable"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># for i in range(100):</span>    is_2_sat<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Explanation-for-Algo"><a href="#6-Explanation-for-Algo" class="headerlink" title="6. Explanation for Algo"></a>6. Explanation for Algo</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h3><p>The after reading the CNF file it will return us four parameters</p><ul><li>m number of clauses</li><li>n number of terms</li><li>A all terms in first position</li><li>B all terms in second position</li></ul><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">scc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> MAX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This is used for checking the SCC problem. </p><p>Store the count number in the corresponding position in SCC.</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3:"></a>Step 3:</h3><p>Based on the  input terms’ sign, we will decide how we set up the edges.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            add_edge_inv<span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4:"></a>Step 4:</h3><p>execute the DFS</p><p>changing the count number</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        dfs_first<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    top <span class="token operator">=</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> visitedInv<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">:</span>        dfs_second<span class="token punctuation">(</span>top<span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5:"></a>Step 5:</h3><p>Whether there is both $X$ and $\bar{X}$ lie in the same SCC condition. Return results.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> scc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> scc<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The given expression is unsatisfiable"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The given expression is satisfiable"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
            <tag> Kosaraju&#39;s Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sticky Navbar (ex2)</title>
      <link href="/liangjunyi.github.io/2022/06/05/sticky-navbar/"/>
      <url>/liangjunyi.github.io/2022/06/05/sticky-navbar/</url>
      
        <content type="html"><![CDATA[<h1 id="Sticky-Navbar"><a href="#Sticky-Navbar" class="headerlink" title="Sticky Navbar"></a>Sticky Navbar</h1><h2 id="1-Video"><a href="#1-Video" class="headerlink" title="1. Video"></a>1. Video</h2><p><a href="https://drive.google.com/file/d/1udxQCogiUYxmwONM1GPULOXHVp1ZxJbo/view?usp=sharing">https://drive.google.com/file/d/1udxQCogiUYxmwONM1GPULOXHVp1ZxJbo/view?usp=sharing</a></p><p><img src="https://s2.loli.net/2022/06/05/u1dnQNpDwZU5Fhc.gif" alt="2"></p><h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Sticky Navigation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://liangjunyi-010.github.io/liangjunyi.github.io/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>My Website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome To My Website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores, consequuntur?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Content One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ratione dolorem voluptates eveniet tempora ut            cupiditate magnam, sapiente, hic quo in ipsum iste soluta eaque perferendis nihil recusandae dolore officia            aperiam corporis similique. Facilis quos tempore labore totam! Consectetur molestiae iusto ducimus error            reiciendis aspernatur dolor, modi dolorem sit architecto, voluptate magni sunt unde est quas? Voluptates a            dolorum voluptatum quo perferendis aut sit. Aspernatur libero laboriosam ab eligendi omnis delectus earum            labore, placeat officiis sint illum rem voluptas ipsum repellendus iste eius recusandae quae excepturi            facere, iure rerum sequi? Illum velit delectus dicta et iste dolorum obcaecati minus odio eligendi!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Content Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Pariatur provident nostrum possimus inventore nisi            laboriosam consequatur modi nulla eos, commodi, omnis distinctio! Maxime distinctio impedit provident,            voluptates illo odio nostrum minima beatae similique a sint sapiente voluptatum atque optio illum est!            Tenetur tempora doloremque quae iste aperiam hic cumque repellat?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://fonts.googleapis.com/css?family=Open+Sans'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Open Sans'</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">max-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s ease-in-out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav .container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s ease-in-out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav a</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 7px 15px<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s ease-in-out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav.active</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav.active a</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav.active .container</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav a.current,.nav a:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #c0392b<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.hero</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://images.pexels.com/photos/450035/pexels-photo-450035.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> bottom center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.hero::before</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.hero h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 46px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> -20px 0 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.hero p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content h2,.content h3</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 150%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content p</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 1.2px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4. JavaScript"></a>4. JavaScript</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> nav <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.nav'</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> fixNav<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">fixNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>scrollY <span class="token operator">></span> nav<span class="token punctuation">.</span>offsetHeight <span class="token operator">+</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nav<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        nav<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-src"><a href="#5-src" class="headerlink" title="5.src"></a>5.src</h2><p><img src="https://s2.loli.net/2022/06/05/foITOqg63HRSE2v.png" alt="image-20220605193739219"></p>]]></content>
      
      
      <categories>
          
          <category> Web develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Login page (ex1)</title>
      <link href="/liangjunyi.github.io/2022/06/05/login-page/"/>
      <url>/liangjunyi.github.io/2022/06/05/login-page/</url>
      
        <content type="html"><![CDATA[<h1 id="Login-page-Form-Wave"><a href="#Login-page-Form-Wave" class="headerlink" title="Login page (Form Wave)"></a>Login page (Form Wave)</h1><h2 id="1-Video"><a href="#1-Video" class="headerlink" title="1. Video"></a>1. Video</h2><p><a href="https://drive.google.com/file/d/1pNgJOeD_Qrjh6UCKGMM6Go3iPvI1ThI9/view?usp=sharing">https://drive.google.com/file/d/1pNgJOeD_Qrjh6UCKGMM6Go3iPvI1ThI9/view?usp=sharing</a></p><p><img src="https://s2.loli.net/2022/06/05/aJWr3PObi9Zoctw.gif" alt="ezgif.com-gif-maker"></p><h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Don't have an account? <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://fonts.googleapis.com/css?family=Muli&amp;display=swap'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* background-color: steelblue; */</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"src/hotels.jpg"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>    <span class="token comment">/* color: #fff; */</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Muli'</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> bottom center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px 40px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container a</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn</span> <span class="token punctuation">&#123;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn:focus</span> <span class="token punctuation">&#123;</span>    <span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn:active</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.98<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.text</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.form-control</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0 40px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.form-control input</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px #fff solid<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 15px 0<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.form-control input:focus,.form-control input:valid</span> <span class="token punctuation">&#123;</span>    <span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.form-control label</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.form-control label span</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> 0.3s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.68<span class="token punctuation">,</span> -0.55<span class="token punctuation">,</span> 0.265<span class="token punctuation">,</span> 1.55<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.form-control input:focus+label span,.form-control input:valid+label span</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-30px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4. JavaScript"></a>4. JavaScript</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> labels <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.form-control label'</span><span class="token punctuation">)</span>labels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">label</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    label<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> label<span class="token punctuation">.</span>innerText        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">letter<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span style="transition-delay:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>idx <span class="token operator">*</span> <span class="token number">50</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">ms"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>letter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-src"><a href="#5-src" class="headerlink" title="5.src"></a>5.src</h2><p><img src="https://s2.loli.net/2022/06/05/QilRXKj8NgeuSLE.png" alt="image-20220605183939453"></p>]]></content>
      
      
      <categories>
          
          <category> Web develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implement msg</title>
      <link href="/liangjunyi.github.io/2022/05/31/implement-msg/"/>
      <url>/liangjunyi.github.io/2022/05/31/implement-msg/</url>
      
        <content type="html"><![CDATA[<h1 id="Implement-Publisher"><a href="#Implement-Publisher" class="headerlink" title="Implement Publisher"></a>Implement Publisher</h1><h2 id="1-code-part"><a href="#1-code-part" class="headerlink" title="1. code part"></a>1. code part</h2><h3 id="1-msg"><a href="#1-msg" class="headerlink" title="(1) msg"></a>(1) msg</h3><pre class="line-numbers language-none"><code class="language-none">string nameuint8  sexuint8  ageuint8 unknown &#x3D; 0uint8 male    &#x3D; 1uint8 female  &#x3D; 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-python"><a href="#2-python" class="headerlink" title="(2) python"></a>(2) python</h3><p>person_publisher.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">########################################################################</span><span class="token comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><span class="token comment">########################################################################</span><span class="token comment"># 该例程将发布/person_info话题，自定义消息类型learning_topic::Person</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> learning_topic<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Person<span class="token keyword">def</span> <span class="token function">velocity_publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ROS节点初始化</span>rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'person_publisher'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建一个Publisher，发布名为/person_info的topic，消息类型为learning_topic::Person，队列长度10</span>person_info_pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'/person_info'</span><span class="token punctuation">,</span> Person<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#设置循环的频率</span>rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 初始化learning_topic::Person类型的消息</span>person_msg <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>person_msg<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>person_msg<span class="token punctuation">.</span>age  <span class="token operator">=</span> <span class="token number">18</span>person_msg<span class="token punctuation">.</span>sex  <span class="token operator">=</span> Person<span class="token punctuation">.</span>male    <span class="token comment"># 发布消息</span>person_info_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>person_msg<span class="token punctuation">)</span>rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Publsh person message[%s, %d, %d]"</span><span class="token punctuation">,</span> person_msg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> person_msg<span class="token punctuation">.</span>age<span class="token punctuation">,</span> person_msg<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token comment"># 按照循环频率延时</span>rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        velocity_publisher<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> rospy<span class="token punctuation">.</span>ROSInterruptException<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>person_subscriber.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">########################################################################</span><span class="token comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><span class="token comment">########################################################################</span><span class="token comment"># 该例程将订阅/person_info话题，自定义消息类型learning_topic::Person</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> learning_topic<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Person<span class="token keyword">def</span> <span class="token function">personInfoCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Subcribe Person Info: name:%s  age:%d  sex:%d"</span><span class="token punctuation">,</span>  msg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>age<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">person_subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ROS节点初始化</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'person_subscriber'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建一个Subscriber，订阅名为/person_info的topic，注册回调函数personInfoCallback</span>    rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">"/person_info"</span><span class="token punctuation">,</span> Person<span class="token punctuation">,</span> personInfoCallback<span class="token punctuation">)</span><span class="token comment"># 循环等待回调函数</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    person_subscriber<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-C"><a href="#3-C" class="headerlink" title="(3) C++"></a>(3) C++</h3><p>person_publisher.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***********************************************************************Copyright 2020 GuYueHome (www.guyuehome.com).***********************************************************************&#x2F;&#x2F;** * 该例程将发布&#x2F;person_info话题，自定义消息类型learning_topic::Person *&#x2F; #include &lt;ros&#x2F;ros.h&gt;#include &quot;learning_topic&#x2F;Person.h&quot;int main(int argc, char **argv)&#123;    &#x2F;&#x2F; ROS节点初始化    ros::init(argc, argv, &quot;person_publisher&quot;);    &#x2F;&#x2F; 创建节点句柄    ros::NodeHandle n;    &#x2F;&#x2F; 创建一个Publisher，发布名为&#x2F;person_info的topic，消息类型为learning_topic::Person，队列长度10    ros::Publisher person_info_pub &#x3D; n.advertise&lt;learning_topic::Person&gt;(&quot;&#x2F;person_info&quot;, 10);    &#x2F;&#x2F; 设置循环的频率    ros::Rate loop_rate(1);    int count &#x3D; 0;    while (ros::ok())    &#123;        &#x2F;&#x2F; 初始化learning_topic::Person类型的消息    learning_topic::Person person_msg;person_msg.name &#x3D; &quot;Tom&quot;;person_msg.age  &#x3D; 18;person_msg.sex  &#x3D; learning_topic::Person::male;        &#x2F;&#x2F; 发布消息person_info_pub.publish(person_msg);       ROS_INFO(&quot;Publish Person Info: name:%s  age:%d  sex:%d&quot;,   person_msg.name.c_str(), person_msg.age, person_msg.sex);        &#x2F;&#x2F; 按照循环频率延时        loop_rate.sleep();    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>person_subscriber.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***********************************************************************Copyright 2020 GuYueHome (www.guyuehome.com).***********************************************************************&#x2F;&#x2F;** * 该例程将订阅&#x2F;person_info话题，自定义消息类型learning_topic::Person *&#x2F; #include &lt;ros&#x2F;ros.h&gt;#include &quot;learning_topic&#x2F;Person.h&quot;&#x2F;&#x2F; 接收到订阅的消息后，会进入消息回调函数void personInfoCallback(const learning_topic::Person::ConstPtr&amp; msg)&#123;    &#x2F;&#x2F; 将接收到的消息打印出来    ROS_INFO(&quot;Subcribe Person Info: name:%s  age:%d  sex:%d&quot;,  msg-&gt;name.c_str(), msg-&gt;age, msg-&gt;sex);&#125;int main(int argc, char **argv)&#123;    &#x2F;&#x2F; 初始化ROS节点    ros::init(argc, argv, &quot;person_subscriber&quot;);    &#x2F;&#x2F; 创建节点句柄    ros::NodeHandle n;    &#x2F;&#x2F; 创建一个Subscriber，订阅名为&#x2F;person_info的topic，注册回调函数personInfoCallback    ros::Subscriber person_info_sub &#x3D; n.subscribe(&quot;&#x2F;person_info&quot;, 10, personInfoCallback);    &#x2F;&#x2F; 循环等待回调函数    ros::spin();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-set-up-env"><a href="#2-set-up-env" class="headerlink" title="2. set up env"></a>2. set up env</h2><h3 id="1-msg-part"><a href="#1-msg-part" class="headerlink" title="(1) msg part"></a>(1) msg part</h3><ol><li><p>go to <code>package.xml</code> , add following </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build_depend</span><span class="token punctuation">></span></span>message_generation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build_depend</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exec_depend</span><span class="token punctuation">></span></span>message_runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exec_depend</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>go to CMakeLists.txt, add following</p><pre class="line-numbers language-none"><code class="language-none">find_package( …… message_generation)add_message_files(FILES Person.msg)generate_messages(DEPENDENCIES std_msgs)catkin_package(…… message_runtime)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/31/zNT21PX5VOJmw3S.png" alt="image-20220531151255415"></p></li></ol><p><img src="https://s2.loli.net/2022/05/31/nctWR6GZ73iFePv.png" alt="image-20220531151334444"></p><p><img src="https://s2.loli.net/2022/05/31/RTEngH5Ya3dx84c.png" alt="image-20220531151401674"></p><h3 id="2-C"><a href="#2-C" class="headerlink" title="(2) C++"></a>(2) C++</h3><p>go to the <code>CMakeLists.txt</code> file, add these two command here</p><pre class="line-numbers language-none"><code class="language-none">add_executable(person_publisher src&#x2F;person_publisher.cpp)target_link_libraries(person_publisher $&#123;catkin_LIBRARIES&#125;)add_dependencies(person_publisher $&#123;PROJECT_NAME&#125;_generate_messages_cpp)add_executable(person_subscriber src&#x2F;person_subscriber.cpp)target_link_libraries(person_subscriber $&#123;catkin_LIBRARIES&#125;)add_dependencies(person_subscriber $&#123;PROJECT_NAME&#125;_generate_messages_cpp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/31/4jZDsHt1p2nmTMY.png" alt="image-20220531151555739"></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implement Publisher</title>
      <link href="/liangjunyi.github.io/2022/05/30/implement-publisher/"/>
      <url>/liangjunyi.github.io/2022/05/30/implement-publisher/</url>
      
        <content type="html"><![CDATA[<h1 id="Implement-Publisher"><a href="#Implement-Publisher" class="headerlink" title="Implement Publisher"></a>Implement Publisher</h1><h2 id="1-code-part"><a href="#1-code-part" class="headerlink" title="1. code part"></a>1. code part</h2><h3 id="1-python"><a href="#1-python" class="headerlink" title="(1) python"></a>(1) python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">########################################################################</span><span class="token comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><span class="token comment">########################################################################</span><span class="token comment"># 该例程将发布turtle1/cmd_vel话题，消息类型geometry_msgs::Twist</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Twist<span class="token keyword">def</span> <span class="token function">velocity_publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ROS节点初始化</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'velocity_publisher'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建一个Publisher，发布名为/turtle1/cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10</span>    turtle_vel_pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'/turtle1/cmd_vel'</span><span class="token punctuation">,</span> Twist<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#设置循环的频率</span>    rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 初始化geometry_msgs::Twist类型的消息</span>        vel_msg <span class="token operator">=</span> Twist<span class="token punctuation">(</span><span class="token punctuation">)</span>        vel_msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.5</span>        vel_msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.2</span><span class="token comment"># 发布消息</span>        turtle_vel_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>vel_msg<span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Publsh turtle velocity command[%0.2f m/s, %0.2f rad/s]"</span><span class="token punctuation">,</span> vel_msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x<span class="token punctuation">,</span> vel_msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token comment"># 按照循环频率延时</span>        rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        velocity_publisher<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> rospy<span class="token punctuation">.</span>ROSInterruptException<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-C"><a href="#2-C" class="headerlink" title="(2) C++"></a>(2) C++</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***********************************************************************Copyright 2020 GuYueHome (www.guyuehome.com).***********************************************************************&#x2F;&#x2F;** * 该例程将发布turtle1&#x2F;cmd_vel话题，消息类型geometry_msgs::Twist *&#x2F; #include &lt;ros&#x2F;ros.h&gt;#include &lt;geometry_msgs&#x2F;Twist.h&gt;int main(int argc, char **argv)&#123;&#x2F;&#x2F; ROS节点初始化ros::init(argc, argv, &quot;velocity_publisher&quot;);&#x2F;&#x2F; 创建节点句柄ros::NodeHandle n;&#x2F;&#x2F; 创建一个Publisher，发布名为&#x2F;turtle1&#x2F;cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10ros::Publisher turtle_vel_pub &#x3D; n.advertise&lt;geometry_msgs::Twist&gt;(&quot;&#x2F;turtle1&#x2F;cmd_vel&quot;, 10);&#x2F;&#x2F; 设置循环的频率ros::Rate loop_rate(10);int count &#x3D; 0;while (ros::ok())&#123;    &#x2F;&#x2F; 初始化geometry_msgs::Twist类型的消息geometry_msgs::Twist vel_msg;vel_msg.linear.x &#x3D; 0.5;vel_msg.angular.z &#x3D; 0.2;    &#x2F;&#x2F; 发布消息turtle_vel_pub.publish(vel_msg);ROS_INFO(&quot;Publsh turtle velocity command[%0.2f m&#x2F;s, %0.2f rad&#x2F;s]&quot;, vel_msg.linear.x, vel_msg.angular.z);    &#x2F;&#x2F; 按照循环频率延时    loop_rate.sleep();&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-set-up-env"><a href="#2-set-up-env" class="headerlink" title="2. set up env"></a>2. set up env</h2><h3 id="1-python-1"><a href="#1-python-1" class="headerlink" title="(1) python"></a>(1) python</h3><ol><li>create a folder under your <code>&lt;package&gt;</code> named scripts, it is because distinguish between python and c++</li><li>go to the terminal</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun turtlesim turtlesim_node <span class="token comment"># another terminal</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun learning_topic velocity_publisher.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>we can see the turtle move</p><h3 id="2-C-1"><a href="#2-C-1" class="headerlink" title="(2) C++"></a>(2) C++</h3><ol><li><p>put the c code in the <code>&lt;package&gt;/src</code> folder </p></li><li><p>go to the <code>CMakeLists.txt</code> file, add these two command here</p><pre class="line-numbers language-none"><code class="language-none">add_executable(velocity_publisher src&#x2F;velocity_publisher.cpp)target_link_libraries(velocity_publisher $&#123;catkin_LIBRARIES&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/30/zuVSMOZvqUNdGeQ.png" alt="image-20220530154424496"></p></li><li><p>go to the workspace root folder and open terminal here</p></li><li><p>compile the c++ file</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>if can see <code>0%</code> to <code>100%</code> means success</p></li><li><p>then go to the terminal </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun turtlesim turtlesim_node <span class="token comment"># another terminal</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun learning_topic velocity_publisher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implement Subscriber</title>
      <link href="/liangjunyi.github.io/2022/05/30/implement-subscriber/"/>
      <url>/liangjunyi.github.io/2022/05/30/implement-subscriber/</url>
      
        <content type="html"><![CDATA[<h1 id="Implement-Subscriber"><a href="#Implement-Subscriber" class="headerlink" title="Implement Subscriber"></a>Implement Subscriber</h1><h2 id="1-code-part"><a href="#1-code-part" class="headerlink" title="1. code part"></a>1. code part</h2><h3 id="1-python"><a href="#1-python" class="headerlink" title="(1) python"></a>(1) python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">########################################################################</span><span class="token comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><span class="token comment">########################################################################</span><span class="token comment"># 该例程将订阅/turtle1/pose话题，消息类型turtlesim::Pose</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> turtlesim<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Pose<span class="token keyword">def</span> <span class="token function">poseCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Turtle pose: x:%0.6f, y:%0.6f"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>x<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pose_subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ROS节点初始化</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'pose_subscriber'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建一个Subscriber，订阅名为/turtle1/pose的topic，注册回调函数poseCallback</span>    rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">"/turtle1/pose"</span><span class="token punctuation">,</span> Pose<span class="token punctuation">,</span> poseCallback<span class="token punctuation">)</span><span class="token comment"># 循环等待回调函数</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pose_subscriber<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-C"><a href="#2-C" class="headerlink" title="(2)C++"></a>(2)C++</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***********************************************************************Copyright 2020 GuYueHome (www.guyuehome.com).***********************************************************************&#x2F;&#x2F;** * 该例程将订阅&#x2F;turtle1&#x2F;pose话题，消息类型turtlesim::Pose *&#x2F; #include &lt;ros&#x2F;ros.h&gt;#include &quot;turtlesim&#x2F;Pose.h&quot;&#x2F;&#x2F; 接收到订阅的消息后，会进入消息回调函数void poseCallback(const turtlesim::Pose::ConstPtr&amp; msg)&#123;    &#x2F;&#x2F; 将接收到的消息打印出来    ROS_INFO(&quot;Turtle pose: x:%0.6f, y:%0.6f&quot;, msg-&gt;x, msg-&gt;y);&#125;int main(int argc, char **argv)&#123;    &#x2F;&#x2F; 初始化ROS节点    ros::init(argc, argv, &quot;pose_subscriber&quot;);    &#x2F;&#x2F; 创建节点句柄    ros::NodeHandle n;    &#x2F;&#x2F; 创建一个Subscriber，订阅名为&#x2F;turtle1&#x2F;pose的topic，注册回调函数poseCallback    ros::Subscriber pose_sub &#x3D; n.subscribe(&quot;&#x2F;turtle1&#x2F;pose&quot;, 10, poseCallback);    &#x2F;&#x2F; 循环等待回调函数    ros::spin();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-set-up-env"><a href="#2-set-up-env" class="headerlink" title="2. set up env"></a>2. set up env</h2><h3 id="1-C"><a href="#1-C" class="headerlink" title="(1) C++"></a>(1) C++</h3><p>go to the <code>CMakeLists.txt</code> file, add these two command here</p><pre class="line-numbers language-none"><code class="language-none">add_executable(pose_subscriber src&#x2F;pose_subscriber.cpp)target_link_libraries(pose_subscriber $&#123;catkin_LIBRARIES&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/31/k8KtvOd9Mnwuxj5.png" alt="image-20220531114832930"></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux &amp; environment variables</title>
      <link href="/liangjunyi.github.io/2022/05/30/linux-environment-variable/"/>
      <url>/liangjunyi.github.io/2022/05/30/linux-environment-variable/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-amp-environment-variables"><a href="#Linux-amp-environment-variables" class="headerlink" title="Linux &amp; environment variables"></a>Linux &amp; environment variables</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><ol><li><p>Linux’s environment variables stored in variable PATH, so can use <code>echo $PATH</code> to check</p></li><li><p>Linux’s environment variables separate by <code>:</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:<span class="token operator">&lt;</span><span class="token environment constant">PATH</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>:<span class="token operator">&lt;</span><span class="token environment constant">PATH</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>:<span class="token operator">&lt;</span><span class="token environment constant">PATH</span> <span class="token operator"><span class="token file-descriptor important">3</span>></span>:------:<span class="token operator">&lt;</span><span class="token environment constant">PATH</span> N<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="2-searching"><a href="#2-searching" class="headerlink" title="2. searching"></a>2. searching</h2><ol><li><p>search all PATH value</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>check PATH environment variable</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>listing all set environemnt variables</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>in the home folder</p><p><code>ctrl h</code> find all Hidden files (name begin with .)</p><p>open <code>.bashrc</code> and edit</p></li><li><p>open <code>.bashrc</code> by command</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-adding"><a href="#3-adding" class="headerlink" title="3. adding"></a>3. adding</h2><ol><li><p><strong>temporarily adding</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAME</span><span class="token operator">=</span>VALUE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>examples:</strong></p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;openjdk11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/nginx/sbin/:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>adding &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F; index adding to the  environment temporarily</strong></p></li><li><p>current user adding permanent</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>add <code>export PATH=&quot;/usr/local/nginx/sbin/:$PATH&quot;</code> at the end of the file</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>all users adding permanent</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>add <code>export PATH=&quot;/usr/local/nginx/sbin/:$PATH&quot;</code> at the end of the file</strong></p><pre class="line-numbers language-bash\" data-language="bash\"><code class="language-bash\">source  &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="4-deleting"><a href="#4-deleting" class="headerlink" title="4. deleting"></a>4. deleting</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> VARIABLE_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>examples:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> JAVA_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS create workspace and package</title>
      <link href="/liangjunyi.github.io/2022/05/29/ros-create-workspace-and-package/"/>
      <url>/liangjunyi.github.io/2022/05/29/ros-create-workspace-and-package/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS-create-workspace-and-package"><a href="#ROS-create-workspace-and-package" class="headerlink" title="ROS create workspace and package"></a>ROS create workspace and package</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>workspace is a folder, containing relative files and folder</p><ul><li>src: Source Space</li><li>build: Build Space</li><li>devel: Development Space</li><li>install: Install Space</li></ul><p><strong>example</strong></p><p><img src="https://s2.loli.net/2022/05/29/JnCedVgN71iQmYS.png" alt="image-20220529201346535"></p><h2 id="2-create-workspace"><a href="#2-create-workspace" class="headerlink" title="2. create workspace"></a>2. create workspace</h2><p><strong>create workspace</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/catkin_ws/src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_init_workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>compile the workspace</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/ <span class="token comment"># go back to the workspace root</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_make <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>setup the environment variable</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$ROS_PACKAGE_PATH</span> <span class="token comment"># check environemnt variable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-create-package"><a href="#3-create-package" class="headerlink" title="3. create package"></a>3. create package</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/src <span class="token comment"># go to src folder under your root folder</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_create_pkg <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token punctuation">[</span>depend1<span class="token punctuation">]</span> <span class="token punctuation">[</span>depend2<span class="token punctuation">]</span> <span class="token punctuation">[</span>depend3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>example</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_create_pkg test_pkg roscpp rospy std_msgs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>compile the package</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws <span class="token comment"># go back to root folder again</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/catkin_ws/devel/sessssstup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS tools in Linux by command line</title>
      <link href="/liangjunyi.github.io/2022/05/29/the-usage-of-ros-tools/"/>
      <url>/liangjunyi.github.io/2022/05/29/the-usage-of-ros-tools/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS-tools-in-Linux"><a href="#ROS-tools-in-Linux" class="headerlink" title="ROS tools in Linux"></a>ROS tools in Linux</h1><h2 id="1-open-Turtlesim"><a href="#1-open-Turtlesim" class="headerlink" title="1. open Turtlesim"></a>1. open Turtlesim</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore <span class="token comment"># start the ROS Master</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun turtlesim turtlesim_node <span class="token comment"># start the turtlesim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun turtlesim turtle_teleop_key <span class="token comment"># start turtle control node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/gokcpLmyPZBVDqR.png" alt="image-20220529151250691"></p><h2 id="2-rqt-graph"><a href="#2-rqt-graph" class="headerlink" title="2. rqt_graph"></a>2. rqt_graph</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rqt_graph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/wrOlhL1vedbkBGs.png" alt="image-20220529151602659"></p><ul><li><code>/turtlesim</code> node is  a simple simulator for teaching ROS concepts.</li><li><code>teleop_turtle</code> node </li><li><code>/turtle1/cmd_vel</code> topic</li></ul><h2 id="3-rosnode-list"><a href="#3-rosnode-list" class="headerlink" title="3. rosnode list"></a>3. rosnode list</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosnode list <span class="token comment"># show the current nodes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/FphekDm5ydRcTz3.png" alt="image-20220529173940604"></p><h2 id="3-rosnode-info"><a href="#3-rosnode-info" class="headerlink" title="3. rosnode info"></a>3. rosnode info</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosnode info somenode <span class="token comment"># check somenode's information</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/IB8NcqrQJwsAl3i.png" alt="image-20220529181619612"></p><h2 id="4-rostopic-list"><a href="#4-rostopic-list" class="headerlink" title="4. rostopic list"></a>4. rostopic list</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rostopic list <span class="token comment"># show the current topic</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/5jNCniHyRQD2mwM.png" alt="image-20220529182106662"></p><h2 id="5-rostopic-pub"><a href="#5-rostopic-pub" class="headerlink" title="5. rostopic pub"></a>5. rostopic pub</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rostopic pub /turtle1/cmd_vel <span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>click <code>tab</code> button twice </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist <span class="token string">"linear:   x: 0.0  y: 0.0  z: 0.0angular:  x: 0.0  y: 0.0  z: 0.0"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/8xYF34qBuzleHOP.png" alt="image-20220529182504985"></p><ul><li>we can find turtle move</li><li>but only move once</li><li>it is because pub instruction only publish one time</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rostopic pub -r <span class="token number">10</span> /turtle1/cmd_vel geometry_msgs/Twist <span class="token string">"linear:  x: 1.0  y: 0.0  z: 0.0angular:  x: 0.0  y: 0.0  z: 0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add <code>-r 10</code> after pub, </p><ul><li><code>-r</code> means rate,</li><li><code>10</code> means 10 times per second</li></ul><p><img src="https://s2.loli.net/2022/05/29/9qzsmeJSZ1G2Y3R.png" alt="image-20220529182826228"></p><h2 id="6-rosmsg-show"><a href="#6-rosmsg-show" class="headerlink" title="6. rosmsg show"></a>6. rosmsg show</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosmsg show geometry_msgs/Twist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/Qhyv4ZiUC1jN7lE.png" alt="image-20220529184730763"></p><h2 id="7-rosservice-list"><a href="#7-rosservice-list" class="headerlink" title="7. rosservice list"></a>7. rosservice list</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosservice list <span class="token comment"># show all service</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/CPW5BKr3aOGspST.png" alt="image-20220529185604586"></p><h2 id="8-rosservice-call"><a href="#8-rosservice-call" class="headerlink" title="8. rosservice call"></a>8. rosservice call</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosservice call /spawn <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>click tab for 2 times</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosservice call /spawn <span class="token string">"x: 2.0y: 2.0theta: 0.0name: 'turtle2'"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/29/EG48CFokNjaAKTc.png" alt="image-20220529190116119"></p><p>we create another turtle</p><p>now we call <code>rostopic list</code> again, we can find we have turtle2 here</p><p><img src="https://s2.loli.net/2022/05/29/yrf4zPleNpY5Sxj.png" alt="image-20220529190225390"></p><h2 id="9-rosbag-record"><a href="#9-rosbag-record" class="headerlink" title="9. rosbag record"></a>9. rosbag record</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosbag record -a -O cmd_record <span class="token comment"># record the data into cmd_record file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>we can find a new file under current folder has been created</li><li>named cmd_record.bag</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosbag play cmd_record.bag <span class="token comment"># play the data(the cmd_record file)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS download</title>
      <link href="/liangjunyi.github.io/2022/05/29/ros-download/"/>
      <url>/liangjunyi.github.io/2022/05/29/ros-download/</url>
      
        <content type="html"><![CDATA[<h3 id="1、添加ROS软件源"><a href="#1、添加ROS软件源" class="headerlink" title="1、添加ROS软件源"></a>1、添加ROS软件源</h3><p><strong>将以下命令复制到ubuntu的终端执行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sh</span> -c <span class="token string">'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或者用下面这条命令（据说这条命令可以提高下载速度）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sh</span> -c <span class="token string">'. /etc/lsb-release &amp;&amp; echo "deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main" > /etc/apt/sources.list.d/ros-latest.list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、添加密钥"><a href="#2、添加密钥" class="headerlink" title="2、添加密钥"></a>2、添加密钥</h3><p><strong>将以下命令复制到ubuntu的终端执行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apt-key adv --keyserver <span class="token string">'hkp://keyserver.ubuntu.com:80'</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>成功后会显示如下界面：</strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201004161015910.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201004161015910.png#pic_center" alt="img"></a></strong></p><h3 id="3、更新软件源"><a href="#3、更新软件源" class="headerlink" title="3、更新软件源"></a>3、更新软件源</h3><p><strong>将以下命令复制到ubuntu的终端执行（在这里顺便说一下，如果用wifi更新慢或者失败的话，切换至手机热点，再执行下面的命令试一下）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>成功后会显示如下界面：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201004161503897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201004161503897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><h3 id="4、做完上面的三步就可以开始安装ROS了"><a href="#4、做完上面的三步就可以开始安装ROS了" class="headerlink" title="4、做完上面的三步就可以开始安装ROS了"></a>4、做完上面的三步就可以开始安装ROS了</h3><p><strong>将以下命令复制到ubuntu的终端执行（安装ROS的指令）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-desktop-full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>因ubuntu版本的不同其安装指令也有可能不同，我的是ubuntu20.04 执行上面的代码时显示：无法定位软件包 ros-melodic-desktop-full ，然后改为执行下面的命令来安装：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-noetic-desktop-full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>会显示如下界面：</strong><br><a href="https://img-blog.csdnimg.cn/20201004162836852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201004162836852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>输入Y继续（保证有网络），就这568MB我下了整整一天。。。。。前80%挺快的用了1分钟左右吧，从81%到100%那速度是真慢啊，当然你可以尝试换一下软件源试一试，换源方法见文章<a href="https://blog.csdn.net/qq_44339029/article/details/108916820">Ubuntu如何通过简单的几步操作来配置系统的软件源、找不到软件和更新怎么办？（带动态图文介绍）</a></strong></p><p><strong>如果在安装过程中你有事需要关闭电脑，可以输入ctrl+c暂停安装，然后正常关闭就可以了，下一次有时间继续安装的时候，按ctrl+alt+t打开终端后，按↑就可以调出之前输入过的安装命令sudo apt install ros-noetic-desktop-full，然后回车输入密码后，就可以继续安装了，我就是分3次下完的。。。</strong><br><strong>安装完后的界面如下（我又重新输入了一遍安装命令，确认已经是最新版了）：</strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201006191050146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201006191050146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></strong></p><h3 id="5、初始化rosdep"><a href="#5、初始化rosdep" class="headerlink" title="5、初始化rosdep"></a>5、初始化rosdep</h3><p><strong>输入以下的命令，先对其初始化一下</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> rosdep init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果出现以下界面，那么恭喜你，你可以省下一些麻烦了，直接跳到第6步就行了：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201006200812951.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201006200812951.png#pic_center" alt="img"></a></p><p><strong>如果出现了以下几种错误，也不要担心，下面几种错误我都经历过 ，当然也就为大家整理好了解决方法</strong><br><strong>（1）错误1：找不到命令</strong><br> <strong>尝试着输入以下命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python-rosdep2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或者：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-rosdep2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这时候它会出现以下的界面，输入Y继续</strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201006201904124.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201006201904124.png#pic_center" alt="img"></a></strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201006202015671.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201006202015671.png#pic_center" alt="img"></a></strong></p><p><strong>到这里如果再输入sudo rosdep init命令试试，如果出现了之前介绍的，我们想要的界面，请跳到第6步，若出现了新的错误，请继续看本步（第5步）的内容</strong></p><p><strong>（2）错误2：ERROR: cannot download default sources list from:https : &#x2F;&#x2F;raw.githubusercontent.com&#x2F;ros&#x2F;rosdistro&#x2F;master&#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.listWebsite may be down.<br>输入以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>然后在打开的hosts文件中添加如下的内容，然后保存退出</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">199.232</span>.28.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>到这里如果再输入sudo rosdep init命令试试，如果出现了之前介绍的，我们想要的界面，请跳到第6步，若出现了新的错误，请继续看本步（第5步）的内容</strong></p><p><strong>（3）错误3：ERROR: default sources list file already exists: &#x2F;etc&#x2F;ros &#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.listPlease delete if you wish to re-initialize</strong><br><strong>输入以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /etc/ros/rosdep/sources.list.d/20-default.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>到这里如果再输入sudo rosdep init命令试试，应该就会出现了之前介绍的我们想要的界面了</strong></p><h3 id="6、更新rosdep"><a href="#6、更新rosdep" class="headerlink" title="6、更新rosdep"></a>6、更新rosdep</h3><p><strong>输入以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosdep update <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>怎么说呢，这一步真的很令人难受，很容易出现没有找到资源或者链接超时之类的错误，比如：unable to process source或error loading sources list: The read operation timed out</strong><br><strong>我在网上查阅了很多的资料，但是针对每个人的网络不同这些效果也不同，以上的错误多半是网络原因导致的，可以切换成手机热点试一下，每个人的状况可能不太一样，反正我试了一下毫无作用，然后当天试了20遍左右（也就是只要出错了，就再输入rosdep update重新试一下），一直出错，然后我有点事就出去了，等到第二天下午再试的时候一遍就成功了（所以说，不急着用的同学，在试了几遍后如果一直错误，可以换不同的时间段再试（说白了，这个跟你的网络波动有关，玄学。。。）），成功后的界面如下所示：</strong><br><a href="https://img-blog.csdnimg.cn/20201007163757827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007163757827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>急着用的小伙伴只能不断的重复试了，下面介绍一种我在网上查到的一种用vim提高成功几率的方法（我没试过哈）</strong><br><strong>（1）需要先安装vim</strong><br><strong>输入以下指令，首先切换到root用户</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>输入以下指令，下载安装vim，然后输入y，确定下载安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>最后输入vim，确认一下有没有安装成功</strong><br><strong>（2）利用vim调大DOWNLOAD_TIMEOUT的值</strong><br><strong>更改 &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;下的三个文件sources_ list.py、gbpdistro_support.py、rep3.py中的DOWNLOAD_TIMEOUT &#x3D; 15.0值，改大一点，可以改成60试一下</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/python2.7/dist-packages/rosdep2/gbpdistro_support.py<span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/python2.7/dist-packages/rosdep2/sources_list.py<span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/python2.7/dist-packages/rosdep2/rep3.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>打开文件，在命令行模式输入“:&#x2F;DOWNLOAD_TIMEOUT”搜索到参数设置的地方，修改过后输入:wq保存退出就行了。这个修改过后只是成功的几率会高很多，后面执行命令的时候发现卡住了就Ctrl + C重来多执行几次试一下</strong></p><h3 id="7、设置环境变量"><a href="#7、设置环境变量" class="headerlink" title="7、设置环境变量"></a>7、设置环境变量</h3><p><strong>输入以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"source /opt/ros/melodic/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或者下面的这行代码，注意到底是melodic还是noetic或者是kinetic是由你的ubuntu的版本决定的，比如我的ubuntu是20.04版本的，对应的是noetic，也就是应该下面的这行代码，而不是上面那行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"source /opt/ros/noetic/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>输入以下命令，运行该脚本让环境变量生效</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8、-安装rosinstall"><a href="#8、-安装rosinstall" class="headerlink" title="8、 安装rosinstall"></a>8、 安装rosinstall</h3><p><strong>输入以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python-rosinstall python-rosinstall-generator python-wstool build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果提示没有可安装候选，如下所示：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007185653900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007185653900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>按照提示更换软件包就行了，按照提示更改为以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-rosinstall python3-rosinstall-generator python3-wstool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9、-验证ROS是否安装成功"><a href="#9、-验证ROS是否安装成功" class="headerlink" title="9、 验证ROS是否安装成功"></a>9、 验证ROS是否安装成功</h3><p><strong>按正常来说ROS到这里就安装完成了，现在我们来验证一下，输入以下命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果出现了以下的问题说明，之前的安装没有安装全</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007193119544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007193119544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>输入以下命令，把没安装的安装一下就好了（如果显示有几个安装包无法下载，是因为网络的原因重新输入以下命令就行了）</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo apt install ros-noetic-desktop-full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>到这里再输入roscore看一下，若安装成功会显示如下界面：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007193747683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007193747683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>然后我们启动一下小海龟的仿真器试一试，按ctrl+alt+t打开一个新的终端，输入以下命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun turtlesim turtlesim_node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>按ctrl+alt+t再打开一个新的终端，输入以下命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun turtlesim turtle_teleop_key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这时候你按键盘上的↑↓←→键就可以控制小海龟移动了！！！</strong><br><strong>那么恭喜你的ROS已经成功安装完了！！！</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007194425419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007194425419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File/Directory instruction</title>
      <link href="/liangjunyi.github.io/2022/05/26/file-directory-instruction/"/>
      <url>/liangjunyi.github.io/2022/05/26/file-directory-instruction/</url>
      
        <content type="html"><![CDATA[<h1 id="File-x2F-Directory-instruction"><a href="#File-x2F-Directory-instruction" class="headerlink" title="File&#x2F;Directory instruction"></a>File&#x2F;Directory instruction</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span> <span class="token comment"># 展示当前路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token comment"># 显示当前文件夹下的东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-a 显示当前目录所有的文件和目录，包括隐藏的</li><li>-l 以列表的方式显示信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token comment"># 切换目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>cd ~  回到自己的家目录</li><li>cd .. 回到当前目录的上一级目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makdir <span class="token comment"># 创建目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-p :创建多级目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rmdir</span> <span class="token comment"># 删除空目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf <span class="token comment"># 删除非空目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Find root Password</title>
      <link href="/liangjunyi.github.io/2022/05/26/find-root-password/"/>
      <url>/liangjunyi.github.io/2022/05/26/find-root-password/</url>
      
        <content type="html"><![CDATA[<h1 id="Find-root-Password"><a href="#Find-root-Password" class="headerlink" title="Find root Password"></a>Find root Password</h1><ol><li><p>重启系统，并按住 <code>Shift</code> 键，直到出现如下界面</p><p><img src="https://s2.loli.net/2022/05/26/2Ta93kg1c76mCLz.png" alt="image-20220526110604328"></p><p>选择 <code>Advanced options for Ubuntu</code></p></li><li><p>进入下图界面后，选择 <code>recovery mode</code>，并根据下面提示在键盘上键入 <code>e</code> 进入编辑模式</p><p><img src="https://s2.loli.net/2022/05/26/KuYDG3LsNMyOpJq.png" alt="image-20220526110620633"></p></li><li><p>在编辑模式中找到如下图所示位置</p><p><img src="https://s2.loli.net/2022/05/26/WjzVL1yAwRicFbU.png" alt="image-20220526110633506"></p><p><img src="https://s2.loli.net/2022/05/26/zPmBDdcOMi4NuQ6.png" alt="image-20220526110700757"></p><p>修改 <code>ro recovery nomodeset</code> 为 <code>quiet splash rw init=/bin/bash</code>，并通过 <code>Ctrl + x</code> 或 <code>F10</code> 启动</p></li><li><p>等到启动完成后，通过 <code>passwd</code> 命令修改密码即可。修改完成后重启服务器即可使用新密码登录</p><p><img src="https://s2.loli.net/2022/05/26/rj76sfgQpDAuN9F.png" alt="image-20220526110715860"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Run level</title>
      <link href="/liangjunyi.github.io/2022/05/24/run-level/"/>
      <url>/liangjunyi.github.io/2022/05/24/run-level/</url>
      
        <content type="html"><![CDATA[<h1 id="Run-level"><a href="#Run-level" class="headerlink" title="Run level"></a>Run level</h1><h2 id="Meaning-of-each-run-level"><a href="#Meaning-of-each-run-level" class="headerlink" title="Meaning of each run level"></a>Meaning of each run level</h2><p>0：关机</p><p>1：单用户【找回丢失密码】 </p><p>2： 多用户状态没有网络服务 （不常用）</p><p>3：多用户状态有网络服务 （常用）</p><p>4：系统未使用保留给用户</p><p>5：图形界面 （常用）</p><p>6：系统重启</p><h2 id="switch-run-level"><a href="#switch-run-level" class="headerlink" title="switch run level"></a>switch run level</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">init <span class="token punctuation">[</span>0123456<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="set-default-run-level"><a href="#set-default-run-level" class="headerlink" title="set default run level"></a>set default run level</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl get-default <span class="token comment"># 查看当前默认runlevel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl set-default Target.target # 设置默认runlevel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/24/xcbsGz2vnrJLECV.png" alt="image-20220524153902289"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The remote root login</title>
      <link href="/liangjunyi.github.io/2022/05/23/the-remote-root-login/"/>
      <url>/liangjunyi.github.io/2022/05/23/the-remote-root-login/</url>
      
        <content type="html"><![CDATA[<ol><li><p>install ssh service</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>edit config file</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>change PermitRootLogin ‘s value into yes</p><p><img src="https://s2.loli.net/2022/05/23/YunjedXmhZWDtgQ.png" alt="image-20220523200715794"></p></li><li><p>restart ssh service</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/ssh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set password for root</title>
      <link href="/liangjunyi.github.io/2022/05/22/set-password-for-root/"/>
      <url>/liangjunyi.github.io/2022/05/22/set-password-for-root/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-set-root-password"><a href="#Linux-set-root-password" class="headerlink" title="Linux set root password"></a>Linux set root password</h1><ol><li><p>command line </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>enter user’s password</p></li><li><p>enter the root password that you want set</p></li><li><p>reenter root password</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shutdown Restart and Logout</title>
      <link href="/liangjunyi.github.io/2022/05/22/shutdown-restart-and-logout/"/>
      <url>/liangjunyi.github.io/2022/05/22/shutdown-restart-and-logout/</url>
      
        <content type="html"><![CDATA[<h1 id="Shutdown-Restart-and-Logout"><a href="#Shutdown-Restart-and-Logout" class="headerlink" title="Shutdown Restart and Logout"></a>Shutdown Restart and Logout</h1><h2 id="Shutdown-amp-Restart"><a href="#Shutdown-amp-Restart" class="headerlink" title="Shutdown &amp; Restart"></a>Shutdown &amp; Restart</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span> -h now <span class="token comment"># 立即进行关机</span><span class="token function">shutdown</span> -h <span class="token number">1</span> <span class="token comment"># 1分钟后关机</span><span class="token function">shutdown</span> -r now <span class="token comment"># 立刻重启计算机</span><span class="token function">halt</span> <span class="token comment"># 关机，同上</span><span class="token function">reboot</span> <span class="token comment"># 重启，同上</span><span class="token function">sync</span> <span class="token comment"># 吧内存数据同步到磁盘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>recommend type sync every time before shutdown</p><p>if it need permission, add sudo beforesu </p></blockquote><h2 id="Login-and-Logout"><a href="#Login-and-Logout" class="headerlink" title="Login and Logout"></a>Login and Logout</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> - root <span class="token comment"># 切换成管理员</span><span class="token function">su</span> - username <span class="token comment"># 切换用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">logout</span> <span class="token comment"># 注销用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>current user is Tom, go to root.</p><p>Then logout at root, it will go back to Tom.</p><p>Then logout again, it will shutdown.</p><h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3><p>It will different when you operate this in Linux and in xshell.</p><p>In Linux, there is no logout for Tom.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>User &amp; User Group management</title>
      <link href="/liangjunyi.github.io/2022/05/22/user-user-group-management/"/>
      <url>/liangjunyi.github.io/2022/05/22/user-user-group-management/</url>
      
        <content type="html"><![CDATA[<h1 id="User-management"><a href="#User-management" class="headerlink" title="User management"></a>User management</h1><h2 id="User-part"><a href="#User-part" class="headerlink" title="User part"></a>User part</h2><h3 id="Add-new-user"><a href="#Add-new-user" class="headerlink" title="Add new user"></a>Add new user</h3><ul><li><p>Basic command line</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>此方法虽然添加了用户，但是有可能没有默认创建文件夹，如果没有创建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -m username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以解决这个问题</p><p>注意如果刚刚执行完上面的语句，需要先删除刚刚的user才能再次创建他，没有办法有两个同名的user</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个也可以，创建完user后也会生成文件夹，更加推荐</p></blockquote><h4 id="example"><a href="#example" class="headerlink" title="example :"></a>example :</h4><p><img src="https://s2.loli.net/2022/05/22/oFr1ltYL2G8jvOe.png" alt="image-20220522213056132"></p><ul><li><p>Example</p><ul><li>add a user <code>milan</code>, default user directory is &#x2F;home&#x2F;milan</li></ul></li><li><p>detail</p><ul><li><p>when create user successful, auto create directory for user at same time</p></li><li><p>if we use </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -d The specified directory username <span class="token comment"># useradd -d 指定目录 新加用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>also create a user but this user will use the specified directory instead of generating a new directory</p><blockquote><p>此方法同上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -m -d The specified directory username<span class="token comment"># useradd -m -d 指定目录 新加用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以解决这个问题</p></blockquote><p><img src="https://s2.loli.net/2022/05/22/18SibYR4H2WteVI.png" alt="image-20220522213953461"></p><blockquote><p>给创建的用户指定了家目录</p></blockquote></li></ul></li></ul><h3 id="Set-password-for-new-user"><a href="#Set-password-for-new-user" class="headerlink" title="Set password for new user"></a>Set password for new user</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> username <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>This operation also need under root </p></blockquote><h3 id="Delete-user"><a href="#Delete-user" class="headerlink" title="Delete user"></a>Delete user</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>only delete this user</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> -r username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Not only delete the user, but also delete the directory</p><h3 id="Querying-User-Information"><a href="#Querying-User-Information" class="headerlink" title="Querying User Information"></a>Querying User Information</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">id</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="examples"><a href="#examples" class="headerlink" title="examples :"></a>examples :</h4><p><img src="https://s2.loli.net/2022/05/23/8P9HBovYZbRr6es.png" alt="image-20220523174054780"></p><p><img src="https://s2.loli.net/2022/05/23/QPJmgTs2dlwRVaC.png" alt="image-20220523174403469"></p><h3 id="Switch-users"><a href="#Switch-users" class="headerlink" title="Switch users"></a>Switch users</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> - username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>In Linux, if the current user has insufficient rights, you can switch to a user with higher right</p></li><li><p>A password is not required to change from a high-privilege user to a low-privilege user</p></li><li><p>Otherwise you need a password</p></li><li><p>To return to the original user, use the exit&#x2F;logout command</p></li></ul><blockquote><p>在操作linux中，如果当前权限不够，可以切换至更高权限的用户</p><p>从高权限用户到低权限用户不需要密码</p><p>反之需要密码</p><p>如果想回到原来用户使用exit&#x2F;logout指令</p></blockquote><h4 id="examples-1"><a href="#examples-1" class="headerlink" title="examples :"></a>examples :</h4><p><img src="https://s2.loli.net/2022/05/23/6EjAWvnoJelfF9Z.png" alt="image-20220523175242905"></p><h3 id="Who-am-i"><a href="#Who-am-i" class="headerlink" title="Who am i"></a>Who am i</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span> am i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>it will show the initial login user’s information</p><h4 id="examples-2"><a href="#examples-2" class="headerlink" title="examples :"></a>examples :</h4><p>i am at root currently, but it will show the init login user – liangjunyi</p><p><img src="https://s2.loli.net/2022/05/23/uinKFQ4VG9EyYLS.png" alt="image-20220523180109271"></p><p><img src="https://s2.loli.net/2022/05/23/bIhWSCz5QD3FrqP.png" alt="image-20220523180147131"></p><h2 id="User-Group-part"><a href="#User-Group-part" class="headerlink" title="User Group part"></a>User Group part</h2><p>Unified management of users with common&#x2F;permission in the system</p><blockquote><p>系统对有 共性&#x2F;权限 的用户进行统一管理</p></blockquote><h3 id="Add-new-group"><a href="#Add-new-group" class="headerlink" title="Add new group"></a>Add new group</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> groupname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Delete-a-group"><a href="#Delete-a-group" class="headerlink" title="Delete a group"></a>Delete a group</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupdel</span> groupname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Add-group-when-add-user"><a href="#Add-group-when-add-user" class="headerlink" title="Add group when add user"></a>Add group when add user</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -g groupname username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Change-user’s-group"><a href="#Change-user’s-group" class="headerlink" title="Change user’s group"></a>Change user’s group</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">usermod</span> -g groupname username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="File-for-user-and-group"><a href="#File-for-user-and-group" class="headerlink" title="File for user and group"></a>File for user and group</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/passwd 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>user的配置文件，记录用户的各种信息</p><p>每行的含义：</p><ul><li>用户名：口令：用户标识号：组标识号：注释性描述：主目录：登陆shell</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/shadow 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>口令的配置文件</p><p>每行的含义：</p><ul><li>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志<ul><li>加密口令：设置了密码的用户会有很长一段的密码，没设置的是叹号</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/group 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>group的配置文件，记录linux包含组的信息</p><p>每行含义：</p><ul><li>组名：口令：组标识号：组内用户列表</li></ul><h2 id="Find-all-users-groups"><a href="#Find-all-users-groups" class="headerlink" title="Find all users, groups"></a>Find all users, groups</h2><h3 id="find-all-users"><a href="#find-all-users" class="headerlink" title="find all users"></a>find all users</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cut</span> -d <span class="token builtin class-name">:</span> -f <span class="token number">1</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token punctuation">\</span>: <span class="token string">'&#123;print $1&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd<span class="token operator">|</span><span class="token function">grep</span> -v nologin<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">halt</span><span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">shutdown</span><span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">":"</span> <span class="token string">'&#123;print $1"|"$3"|"$4&#125;'</span><span class="token operator">|</span><span class="token function">more</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="find-all-groups"><a href="#find-all-groups" class="headerlink" title="find all groups"></a>find all groups</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/group<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getent group<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vi &amp; Vim in Linux</title>
      <link href="/liangjunyi.github.io/2022/05/22/vi-vim-in-linux/"/>
      <url>/liangjunyi.github.io/2022/05/22/vi-vim-in-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Vi-amp-Vim-in-Linux"><a href="#Vi-amp-Vim-in-Linux" class="headerlink" title="Vi &amp; Vim in Linux"></a>Vi &amp; Vim in Linux</h1><h2 id="basic-description-about-vi-amp-vim"><a href="#basic-description-about-vi-amp-vim" class="headerlink" title="basic description about vi &amp; vim"></a>basic description about vi &amp; vim</h2><p>vi is Linux built in text editor</p><p>vim is the enhanced version to vi, can do program</p><h2 id="three-patterns-by-vi-amp-vim"><a href="#three-patterns-by-vi-amp-vim" class="headerlink" title="three patterns by vi &amp; vim"></a>three patterns by vi &amp; vim</h2><ul><li>normal pattern 正常模式<ul><li>can not edit in this pattern</li></ul></li><li>edit pattern 编辑模式</li><li>cmd line pattern 命令行模式</li></ul><h2 id="operating-process"><a href="#operating-process" class="headerlink" title="operating process"></a>operating process</h2><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> Hello.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/OVQKMnNU3glEbr4.png" alt="image-20220522170231266"></p><p>by this command, we go to normal pattern, from our command line</p><p><img src="https://s2.loli.net/2022/05/22/uq4t2XNYa8Gw5Eg.png" alt="image-20220522170425702"></p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> i <span class="token comment"># 摁下i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>now we are in edit pattern</p><p><img src="https://s2.loli.net/2022/05/22/mxjYWdJ3VzeSR5T.png" alt="image-20220522170558960"></p><p>we can write our file here</p><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>After editing</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">we <span class="token builtin class-name">type</span> esc first  <span class="token comment"># 摁下esc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>now we leave the edit pattern and go to normal pattern now</p><p><img src="https://s2.loli.net/2022/05/22/KIrTDZzySEfCpxU.png" alt="image-20220522171432159"></p><p>then type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:wq <span class="token comment"># write(save) and quit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/oNIKehzbUL4MClr.png" alt="image-20220522172138024"></p><p><img src="https://s2.loli.net/2022/05/22/Is7E4atN6PTzmR8.png" alt="image-20220522171815264"></p><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>if you want edit this file again</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> Hello.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/JHtj6Lavx9fTqWB.png" alt="image-20220522172027683"></p><h2 id="how-to-change-vi-amp-vim"><a href="#how-to-change-vi-amp-vim" class="headerlink" title="how to change vi &amp; vim"></a>how to change vi &amp; vim</h2><p><img src="https://s2.loli.net/2022/05/22/5TQscPwDxLqnR3I.png" alt="image-20220522165131419"></p><h2 id="shortcut-key-words-快捷键"><a href="#shortcut-key-words-快捷键" class="headerlink" title="shortcut key words 快捷键"></a>shortcut key words 快捷键</h2><h4 id="under-normal-pattern-copy-and-paste"><a href="#under-normal-pattern-copy-and-paste" class="headerlink" title="under normal pattern : copy and paste"></a>under normal pattern : copy and paste</h4><ul><li>copy current line : yy</li><li>paste : p<ul><li>copy 5 line below current line : 5yy 包括复制当前行</li></ul></li><li>delete current line : dd<ul><li>delete 5 line below current line : 5dd 包括删除当前行</li></ul></li></ul><blockquote><p>these are under normal pattern, if you are in edit pattern, it will just type yy in the file</p></blockquote><h4 id="search-a-word-in-the-file"><a href="#search-a-word-in-the-file" class="headerlink" title="search a word in the file"></a>search a word in the file</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> enter <span class="token comment"># 摁下回车开始查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> n <span class="token comment"># 下一个，查到最后一个单词则回到开头</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="set-number-for-line"><a href="#set-number-for-line" class="headerlink" title="set number for line"></a>set number for line</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">:</span> <span class="token builtin class-name">set</span> nu <span class="token comment"># 设置行号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/bqmNxlnLCo5ZEhB.png" alt="image-20220522173207087"></p><p><img src="https://s2.loli.net/2022/05/22/9tnNXgimkxzyuTY.png" alt="image-20220522173412258"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">:</span> <span class="token builtin class-name">set</span> nonu <span class="token comment"># 取消行号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="go-to-the-last-line-and-first-line"><a href="#go-to-the-last-line-and-first-line" class="headerlink" title="go to the last line and first line"></a>go to the last line and first line</h4><blockquote><p>under normal pattern</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">G <span class="token comment"># go to last line</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gg <span class="token comment"># go to first line</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h4><p>at the normal pattern </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">u <span class="token comment"># undo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>if do some editions in edit pattern, can type esc go to normal pattern, then type u to undo all the editions you did just now</p></blockquote><h4 id="move-the-cursor"><a href="#move-the-cursor" class="headerlink" title="move the cursor"></a>move the cursor</h4><p>at the normal pattern</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">20</span> <span class="token builtin class-name">shift</span> g <span class="token comment"># move to the 20th line</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>有可能键盘因为摁完shift后变成中文输入法，可以采取的措施是打开大写输入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open an app in Linux</title>
      <link href="/liangjunyi.github.io/2022/05/19/open-an-app-in-linux/"/>
      <url>/liangjunyi.github.io/2022/05/19/open-an-app-in-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Open-an-app-in-Linux"><a href="#Open-an-app-in-Linux" class="headerlink" title="Open an app in Linux"></a>Open an app in Linux</h1><h2 id="Open-app"><a href="#Open-app" class="headerlink" title="Open app"></a>Open app</h2><p>For example open firefox, we can type in terminal </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firefox $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>no need go to specific folder, can directly type this command in the terminal</li><li>The reason add <code>$</code> at end is aim to run firefox at backend, so that the terminal will not be occupied by Firefox</li><li>if you forget type <code>$</code>, you can type <code>Ctrl+Z</code> and then type <code>bg</code> and return.</li></ul></blockquote><h2 id="Close-app"><a href="#Close-app" class="headerlink" title="Close app"></a>Close app</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>show the currently running process</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>is to show all the currently running process and their state</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>it means search</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> evince<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>search for evince process</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> evince     <span class="token comment">#查到evince的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>|:管道符号,command1 |command2,将command1输出结果通过管道作为command2命令的输入参数.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">kill</span> -s <span class="token number">9</span> pid   <span class="token comment">#杀死进程号为PID的进程，例如：kill -9 6705</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Some-commands"><a href="#Some-commands" class="headerlink" title="Some commands"></a>Some commands</h2><h3 id="ps命令-Process-Status"><a href="#ps命令-Process-Status" class="headerlink" title="ps命令 (Process Status)"></a>ps命令 (Process Status)</h3><p><code>ps aux</code>‘output format</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">USER</span> PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式说明：</p><ul><li><p>USER: 行程拥有者</p></li><li><p>PID: pid 就是这个程序的 ID </p></li><li><p>%CPU: 占用的 CPU 使用率</p></li><li><p>%MEM: 占用的记忆体使用率</p></li><li><p>VSZ: 占用的虚拟记忆体大小</p></li><li><p>RSS: 占用的记忆体大小</p></li><li><p>TTY: 终端的次要装置号码 (minor device number of tty)</p></li><li><p>STAT: 该行程的状态，linux的进程有5种状态：</p><ul><li><p>D 不可中断 uninterruptible sleep (usually IO)  (收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</p></li><li><p>R 运行 runnable (on run queue)      (正在运行或在运行队列中等待)</p></li><li><p>S 中断 sleeping     (休眠中, 受阻, 在等待某个条件的形成或接受到信号)</p></li><li><p>T 停止 traced or stopped    (进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</p></li><li><p>Z 僵死 a defunct (”zombie”) process   (进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</p></li><li><p>注: 其它状态还包括W(无驻留页), &lt;(高优先级进程), N(低优先级进程), L(内存锁页).</p></li></ul></li><li><p>START: 进程开始时间</p></li><li><p>TIME: 执行的时间</p></li><li><p>COMMAND:所执行的指令</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA Game Machine Project</title>
      <link href="/liangjunyi.github.io/2022/05/18/fpga-game-machine-project/"/>
      <url>/liangjunyi.github.io/2022/05/18/fpga-game-machine-project/</url>
      
        <content type="html"><![CDATA[<h1 id="Prezzer"><a href="#Prezzer" class="headerlink" title="Prezzer"></a>Prezzer</h1><h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><ul><li>Tran Nguyen Bao Long</li><li>Kat Yong Jie</li><li>Liang Junyi</li><li>Wang Zhuoran</li><li>Lu Mingrui</li><li>Han Jin</li><li>Sun Zhengnan</li><li>Yang Haocheng</li></ul><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>For our 50.002 project, we have created a single-player game called Prezzer. The objective of the game is to score the highest amount of points possible before the 30 seconds count down and avoid pressing the wrong button.</p><p>This is a game whereby the player must observe a matrix of LED lights, this LED matrix consists of three columns and four rows and there are 3 different coloured lights: red, green and blue player need to press different times to clear different color LED: red 3 times, green 2 times and red 1 times, and each row only lights one LED, Player need to press the right buttons based on the LED light at the lowest level with the corresponding colors and position.</p><p>The coloured LED will move down after we press the button correctly from the top to the bottom. If the player presses the wrong button. The game ends if the player presses the wrong button or runs out of time, and the final score will be displayed on the 7 seg on the top left of the game and time left will be displayed on the 7 seg on the top right of the game.</p><h3 id="How-to-play"><a href="#How-to-play" class="headerlink" title="How to play"></a>How to play</h3><ol><li>Press RESET button to start</li><li>Colored tiles will be randomly generated on the three columns</li><li>Press button below corresponding column</li><li>Clear as many tiles as you can within 30 seconds and get the max score</li><li>Pressing a button for the wrong column will mean game over.</li></ol><h3 id="Tiles-scores"><a href="#Tiles-scores" class="headerlink" title="Tiles scores"></a>Tiles scores</h3><ul><li>Red: 3 presses &#x3D; 3 points</li><li>Green: 2 presses &#x3D; 2 points</li><li>Blue: 1 press &#x3D; 1 point</li></ul><p>Red turns to Green turns to Blue CLEAR for each correct press</p><h3 id="ALU-Function"><a href="#ALU-Function" class="headerlink" title="ALU Function"></a>ALU Function</h3><table><thead><tr><th>Operation</th><th>ALUFN</th><th>Decimal</th></tr></thead><tbody><tr><td>ADD</td><td>0000</td><td>0</td></tr><tr><td>SUB</td><td>0001</td><td>1</td></tr><tr><td>MUL (extra)</td><td>0010</td><td>2</td></tr><tr><td>CMPEQ</td><td>0011</td><td>3</td></tr><tr><td>CMPLT</td><td>0100</td><td>4</td></tr><tr><td>CMPLE</td><td>0101</td><td>5</td></tr><tr><td>AND</td><td>0110</td><td>6</td></tr><tr><td>OR</td><td>0111</td><td>7</td></tr><tr><td>XOR</td><td>1000</td><td>8</td></tr><tr><td>A</td><td>1001</td><td>9</td></tr><tr><td>SHL</td><td>1010</td><td>10</td></tr><tr><td>SHR</td><td>1011</td><td>11</td></tr><tr><td>SRA</td><td>1100</td><td>12</td></tr><tr><td>SHD(extra)</td><td>1101</td><td>13</td></tr><tr><td>B(extra)</td><td>1110</td><td>14</td></tr><tr><td>ENQ(extra)</td><td>1111</td><td>15</td></tr></tbody></table><h3 id="Finite-State-Machine"><a href="#Finite-State-Machine" class="headerlink" title="Finite State Machine"></a>Finite State Machine</h3><p><img src="https://s2.loli.net/2022/05/18/9SUiIrtzADcaMw3.png" alt="image-20220518162522273"></p><h3 id="Datapath"><a href="#Datapath" class="headerlink" title="Datapath"></a>Datapath</h3><p><img src="https://s2.loli.net/2022/05/18/WgMfF9HcGOLhiDV.png" alt="image-20220518162707353"></p><h3 id="Game-Video"><a href="#Game-Video" class="headerlink" title="Game Video"></a>Game Video</h3><p><a href="https://drive.google.com/file/d/1AakxMa9XYiGlq1NfNdacxOq8Fx1BowqT/view?usp=sharing">https://drive.google.com/file/d/1AakxMa9XYiGlq1NfNdacxOq8Fx1BowqT/view?usp=sharing</a></p>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> Finite State Machine </tag>
            
            <tag> Datapath </tag>
            
            <tag> Arithmetic Logic Unit (ALU) </tag>
            
            <tag> IO control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android App</title>
      <link href="/liangjunyi.github.io/2022/05/18/android-app-project/"/>
      <url>/liangjunyi.github.io/2022/05/18/android-app-project/</url>
      
        <content type="html"><![CDATA[<h1 id="Touchless-Chef"><a href="#Touchless-Chef" class="headerlink" title="Touchless Chef"></a>Touchless Chef</h1><blockquote><p><a href="https://istd.sutd.edu.sg/undergraduate/courses/50001-information-systems-programming">50.001</a> 1D Project</p><p>A POC Recipe Android Application using Google Mediapipe Hands Tracking model for smart touchless scrolling.</p><p>Deliverables:</p><ul><li>Download and install our <code>.apk</code> <a href="https://drive.google.com/file/d/13otJ7cr-M_WNgoN18USStgj5GLp90yvS/view?usp=sharing"><em><strong>HERE</strong></em></a> to try it out</li><li><a href="https://drive.google.com/file/d/1CY5GiMf-hH6lPLB7P39XUdJx_tyvs2Lg/view">Slides</a></li><li><a href="https://drive.google.com/file/d/1Y4r8ZRK22YiWPUSEJxjkPF3D8pMjsIxF/view?usp=sharing">Poster</a></li><li><a href="https://drive.google.com/file/d/1eMMJQq2ctQO_Nt-fLtD9gfOnbFEruVBF/view?usp=sharing">Video</a></li></ul></blockquote><h2 id="A-Acknowledgement"><a href="#A-Acknowledgement" class="headerlink" title="A. Acknowledgement:"></a>A. Acknowledgement:</h2><ul><li><p>Tran Nguyen Bao Long</p><p>@TNBL</p><p>: Project Lead</p><ul><li>define software architecture</li><li>documentation</li></ul></li><li><p>Li Xueqing</p><p>@cnmnrll</p><p>: Project Design</p><ul><li>set basic <code>Recipe</code>, <code>Ingredients</code> and <code>Instructions</code> models <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/model"><code>model</code></a></li><li>documentation</li></ul></li><li><p>Melodie Chew En Qi</p><p>@melmelchew</p><p>: Marketing + Frontend</p><ul><li><code>RecyclerView</code> and <code>NavigationView</code></li><li><a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/adapter/recipe"><code>adapter</code></a> for <code>RecyclerView</code></li></ul></li><li><p>Melvin Lim Boon Han</p><p>@melvinlimbh</p><p>: Marketing + Frontend</p><ul><li>Fragments for different cuisines <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/home"><code>home</code></a></li><li>Fragments for creating recipes <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/recipe">RecipeCreate</a></li><li>all resources and layouts <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/res"><code>res</code></a></li></ul></li><li><p>Han Jin</p><p>@dlmszhhh</p><p>: Backend Acitivity</p><ul><li>basic recipe activities <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/activity"><code>acitivity</code></a></li></ul></li><li><p>Wang Zhouran</p><p>@wzrwzr23</p><p>: Backend Database</p><ul><li>setup <code>SQLite</code> database and corresponding Data Access Objects <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/dao"><code>dao</code></a> and <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/adapter/DatabaseAdapter.java"><code>adapter</code></a></li></ul></li><li><p>Liang Junyi</p><p>@LiangJunyi-010</p><p>Backend HandTracking</p><ul><li>implement HandTracking using Google Mediapipe <a href="https://google.github.io/mediapipe/solutions/hands.html"><strong>Hands model</strong></a> for touchless scrolling in <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/activity/recipe/ViewRecipeActivity.java"><code>ViewRecipeActivity</code></a></li></ul></li></ul><h2 id="B-Description"><a href="#B-Description" class="headerlink" title="B. Description"></a>B. Description</h2><blockquote><p>Overview of Design Pattern used:</p><ul><li><strong>Adapter Design Pattern</strong> (for SQLite database and RecyclerView)</li><li><strong>Singleton Design Pattern</strong> (for SQLite database)</li><li><strong>Observer Design Pattern</strong> (for <code>CreateRecipeActivity</code>)</li><li><strong>Factory Design Pattern</strong> (for Cuisine Fragment)</li><li><strong>Template Method Design Pattern</strong> (for Create Recipe Fragment)</li></ul></blockquote><h3 id="0-Model"><a href="#0-Model" class="headerlink" title="0. Model"></a>0. <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/model">Model</a></h3><ul><li>Utilize<code>Parcelable</code>interface:<ul><li>speed up data transfer using Java Serializable</li><li>easily pass data as <code>Bundle</code> object through Activity</li></ul></li><li>Recipe :<ul><li><code>id</code>: primary key for SQLite</li><li><code>name</code>: name of recipe</li><li><code>description</code>: short description of recipe</li><li><code>category</code>: category&#x2F;cuisine (Vietnamese&#x2F;Chinese)</li><li><code>mealType</code>: type of meals (Breakfast, Dinner,…)</li><li><code>time</code>: estimated to prepare the dish</li><li><code>imagePath</code>: local URI path to Recipe image</li><li><code>ingredients</code>: list of ingredients</li><li><code>instructions</code>: list of instructions</li></ul></li><li>Instruction :<ul><li><code>id</code>: primary key for SQLite</li><li><code>recipeID</code>: foreign key</li><li><code>content</code>: instruction body</li></ul></li><li>Ingredient :<ul><li><code>id</code>: primary key for SQLite</li><li><code>recipeID</code>: foreign key</li><li><code>name</code>: ingredient name <a href="https://camo.githubusercontent.com/797e593a78147ad691b2d046e1b76426c063283092763db6a8c7566d7b6ffb21/68747470733a2f2f692e696d6775722e636f6d2f594f4c374f756a2e706e67"><img src="https://camo.githubusercontent.com/797e593a78147ad691b2d046e1b76426c063283092763db6a8c7566d7b6ffb21/68747470733a2f2f692e696d6775722e636f6d2f594f4c374f756a2e706e67" alt="img"></a></li></ul></li></ul><h3 id="1-Database"><a href="#1-Database" class="headerlink" title="1. Database"></a>1. Database</h3><ul><li>We use local database SQLite and utilize abstract class <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper"><code>SQLiteOpenHelper</code></a> to create and manage our database in <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/dao/SQLiteDbCRUD.java"><code>SQLiteDbCRUD</code></a></li></ul><p><a href="https://camo.githubusercontent.com/ec41a0a744d6385ec99e31a07a1a7cc3827b08f0b9e949432a1bbf382ef8a91f/68747470733a2f2f692e696d6775722e636f6d2f556f32645169462e706e67"><img src="https://camo.githubusercontent.com/ec41a0a744d6385ec99e31a07a1a7cc3827b08f0b9e949432a1bbf382ef8a91f/68747470733a2f2f692e696d6775722e636f6d2f556f32645169462e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/f27bd91ecfc2407df21da9b5390865f920f4e98539ab1a61372f8d34d731decc/68747470733a2f2f692e696d6775722e636f6d2f757667593236592e706e67"><img src="https://camo.githubusercontent.com/f27bd91ecfc2407df21da9b5390865f920f4e98539ab1a61372f8d34d731decc/68747470733a2f2f692e696d6775722e636f6d2f757667593236592e706e67" alt="drawing"></a></p><ul><li>Adapter in<code>DatabaseAdapter</code><ul><li>using <strong>Adapter Design Pattern</strong> as main API for Recipe CRUD operations</li><li>using <strong>Singleton Design Pattern</strong> to create a single instance of our database to be shared within all activities</li></ul></li><li>Data Access Objects (DAO):<ul><li>provide an API for our app to set&#x2F;get data from SQLite database</li><li>map SQLite <code>Config</code> with corresponding model attributes</li><li><code>Config</code> is a nested class improving encapsulation since it is only used within <code>dao</code> package for CRUD operations <a href="https://camo.githubusercontent.com/ab0bbbe982ee75e8c1a4846edd3da3d0cc71cba3a496bd7478ff29912983e93d/68747470733a2f2f692e696d6775722e636f6d2f4d4c77735766532e706e67"><img src="https://camo.githubusercontent.com/ab0bbbe982ee75e8c1a4846edd3da3d0cc71cba3a496bd7478ff29912983e93d/68747470733a2f2f692e696d6775722e636f6d2f4d4c77735766532e706e67" alt="img"></a></li></ul></li></ul><h3 id="2-Activity"><a href="#2-Activity" class="headerlink" title="2. Activity"></a>2. Activity</h3><ul><li>Both <code>MainActivity</code> and <code>ViewRecipeActivity</code> inherits a <code>Toolbar</code> (explain in section B5a) from abstract class <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/activity/MenuActivity.java"><code>MenuActivity</code></a></li><li><code>MainActivity</code><ul><li>implements interface <code>BaseFragment.FragmentListener</code> that define blueprint for methods to:<ul><li>display recipe: <code>onShowRecipe</code> which navigates to <code>ViewRecipeActivity</code> (an <strong>Explicit Intent</strong>)</li><li>delete recipe: <code>onDeleteRecipe</code></li></ul></li><li>consists of 3 main views:<ul><li><code>ImageView</code> show background image for selected Cuisines</li><li><code>DrawerLayout</code> for <code>NavigationView</code> (explain in section B5b)</li><li><code>NestedScrollView</code> for displaying of recipes for different Cuisine Fragments (explain in section B4a) <a href="https://camo.githubusercontent.com/3abad28c86c495ef66c203e3b8e0b85d790231e75214bf6babedea7ff11329cd/68747470733a2f2f692e696d6775722e636f6d2f676e74644736622e706e67"><img src="https://camo.githubusercontent.com/3abad28c86c495ef66c203e3b8e0b85d790231e75214bf6babedea7ff11329cd/68747470733a2f2f692e696d6775722e636f6d2f676e74644736622e706e67" alt="img"></a></li></ul></li></ul></li><li><code>ViewRecipeActivity</code>:<ul><li>display chosen recipe from the data passed as parcel from <code>MainActivity</code></li><li>where <strong>HandsTracking</strong> feature (explain in section B3) is located</li></ul></li><li><code>CreateRecipeActivity</code><ul><li>implements 3 Recipe Create Fragment listener, each corresponding to 1 step in creating the recipe (explain in section B4b)</li><li>using <strong>Observer Design Pattern</strong>, changing Fragment when reaching subsequent step in creating Recipe <a href="https://camo.githubusercontent.com/ba495d01eb3fd14c04ab9a7e634b42ce99ada5309ade64d16e240094772d2f58/68747470733a2f2f692e696d6775722e636f6d2f4a51514d4672662e706e67"><img src="https://camo.githubusercontent.com/ba495d01eb3fd14c04ab9a7e634b42ce99ada5309ade64d16e240094772d2f58/68747470733a2f2f692e696d6775722e636f6d2f4a51514d4672662e706e67" alt="img"></a></li></ul></li></ul><h3 id="3-Hand-Tracking"><a href="#3-Hand-Tracking" class="headerlink" title="3. Hand Tracking"></a>3. Hand Tracking</h3><ul><li>This feature is implemented in <code>ViewRecipeActivity</code><ul><li>2 main Buttons <code>Start Tracking</code> and <code>Stop Tracking</code> to enable&#x2F;disable the feature, which open up a <code>glSurfaceView</code> in the <code>RelativeLayout at the bottom of the page</code></li><li><code>glSurfaceView</code> is an instance of <code>SolutionGlSurfaceView&lt;HandsResult&gt;</code> provided by Mediapipe Library, similar to <a href="https://en.wikipedia.org/wiki/Java_OpenGL">OpenGL</a> that allows writing words and drawing on webcam output.</li><li>we detect whether the index finger is pointing up or down and from there, post a <code>Runnable</code> to our <code>ScrollView</code> (that is displaying the Ingredients and Instructions) to perform a smooth scroll correspoding to the gesture. <a href="https://camo.githubusercontent.com/495aca4b8f5d6950563130c404646125d54242b2e3bab8d9e08951f5a16c1040/68747470733a2f2f692e696d6775722e636f6d2f514871456c696b2e706e67"><img src="https://camo.githubusercontent.com/495aca4b8f5d6950563130c404646125d54242b2e3bab8d9e08951f5a16c1040/68747470733a2f2f692e696d6775722e636f6d2f514871456c696b2e706e67" alt="drawing"></a></li></ul></li></ul><h3 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h3><h4 id="a-Cuisine-Fragment-under-fragment-home"><a href="#a-Cuisine-Fragment-under-fragment-home" class="headerlink" title="a. Cuisine Fragment under fragment/home"></a>a. Cuisine Fragment under <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/home"><code>fragment/home</code></a></h4><p><a href="https://camo.githubusercontent.com/f8363e12a5a22f5626044f9fbc61243e3f8a2cade25498748f7e3149e943fedb/68747470733a2f2f692e696d6775722e636f6d2f6766364759397a2e706e67"><img src="https://camo.githubusercontent.com/f8363e12a5a22f5626044f9fbc61243e3f8a2cade25498748f7e3149e943fedb/68747470733a2f2f692e696d6775722e636f6d2f6766364759397a2e706e67" alt="img"></a></p><ul><li>Both <code>ChineseFragment</code> and <code>VietnameseFragment</code> extends from abstract class <code>BaseFragment</code><ul><li>using <strong>Factory Design Pattern</strong> (<code>BaseFragment</code> is the factory, <code>ChineseFragment</code> and <code>VietnameseFragment</code> are the products) allow us to easily scale to multiple cuisines in the future</li><li>the only abstract method is <code>getFragmentLayout</code> that each product should define to generate its own correct fragment</li><li>both using <code>RecyclerView</code> to display its recipes (explain in section B5c)</li></ul></li></ul><h4 id="b-Recipe-Create-Fragment-under-fragment-recipe"><a href="#b-Recipe-Create-Fragment-under-fragment-recipe" class="headerlink" title="b. Recipe Create Fragment under fragment/recipe"></a>b. Recipe Create Fragment under <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/recipe"><code>fragment/recipe</code></a></h4><p><a href="https://camo.githubusercontent.com/c160347f4977d083446d9522068f8d09376b75a9c1e0225e13902aaf15a1d72d/68747470733a2f2f692e696d6775722e636f6d2f66303735666d6b2e706e67"><img src="https://camo.githubusercontent.com/c160347f4977d083446d9522068f8d09376b75a9c1e0225e13902aaf15a1d72d/68747470733a2f2f692e696d6775722e636f6d2f66303735666d6b2e706e67" alt="img"></a></p><ul><li>3 fragments correspond to 3 steps in creating a new Recipe:<ul><li><code>RecipeCreateImageFragment</code>: (1st step) to add image, description, choose meal type and time</li><li><code>RecipeCreateIngredientFragment</code>: (2nd step) to add ingredients</li><li><code>RecipeCreateInstructionFragment</code>: (3rd step) to add instructions</li></ul></li></ul><p><a href="https://camo.githubusercontent.com/e3feefa7060906cf963bb8a05d143af7ebb119e99f0af0a4ffae68e54e253f07/68747470733a2f2f692e696d6775722e636f6d2f304b724c5370642e706e67"><img src="https://camo.githubusercontent.com/e3feefa7060906cf963bb8a05d143af7ebb119e99f0af0a4ffae68e54e253f07/68747470733a2f2f692e696d6775722e636f6d2f304b724c5370642e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/d12d6d998b831b091f57ae4eab7f55f429cdce7aae50960c4dc4aa5a1ad7e064/68747470733a2f2f692e696d6775722e636f6d2f6c4d4a6b7275732e706e67"><img src="https://camo.githubusercontent.com/d12d6d998b831b091f57ae4eab7f55f429cdce7aae50960c4dc4aa5a1ad7e064/68747470733a2f2f692e696d6775722e636f6d2f6c4d4a6b7275732e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/7dcb09ad3fc3825cccbca6b8c65c3e7fe3b0c057a100eb6be54ff1938d3a4a11/68747470733a2f2f692e696d6775722e636f6d2f437a736e43704d2e706e67"><img src="https://camo.githubusercontent.com/7dcb09ad3fc3825cccbca6b8c65c3e7fe3b0c057a100eb6be54ff1938d3a4a11/68747470733a2f2f692e696d6775722e636f6d2f437a736e43704d2e706e67" alt="drawing"></a></p><ul><li>All 3 Create Recipe Fragments extends the abstract class <code>NavigableFragment</code> :<ul><li>blueprint for method <code>onNext</code> that define which fragment to navigate to after completing each creating new recipe step</li><li>using <strong>Template Method Design Pattern</strong> with <code>NavigableFragment</code> as the template</li></ul></li><li><code>RecipeCreateImageFragment</code> can access the local storage to upload new image for recipe (an <strong>Implicit Intent</strong>)</li></ul><h3 id="5-View-and-Layout"><a href="#5-View-and-Layout" class="headerlink" title="5. View and Layout"></a>5. View and Layout</h3><h4 id="a-Toolbar"><a href="#a-Toolbar" class="headerlink" title="a. Toolbar"></a>a. Toolbar</h4><ul><li>Both <code>MainActivity</code> and <code>ViewRecipeActivity</code> needs to define its own Toolbar according to the blueprint defined in the abstract class <code>MenuActivity</code></li><li><code>MainActivity</code> Toolbar:<ul><li>includes <code>NavigationView</code> (explain in section B5b below)</li><li>includes menu to add a “New recipe”</li></ul></li><li><code>ViewRecipeActivity</code>Toolbar:<ul><li>support <strong>Edit</strong> and <strong>Delete</strong> recipe functionalities</li></ul></li></ul><p><a href="https://camo.githubusercontent.com/4909fb08e3c5f8b9d5ca4c34fb4be64f94ffe25480df2ba895db9b6984f6117b/68747470733a2f2f692e696d6775722e636f6d2f3738664e304a4b2e706e67"><img src="https://camo.githubusercontent.com/4909fb08e3c5f8b9d5ca4c34fb4be64f94ffe25480df2ba895db9b6984f6117b/68747470733a2f2f692e696d6775722e636f6d2f3738664e304a4b2e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/bfc21f32b917be2d07c33f063a8a2f60a6b9353ce0201cd849bb0647f07aa343/68747470733a2f2f692e696d6775722e636f6d2f584358474e51532e706e67"><img src="https://camo.githubusercontent.com/bfc21f32b917be2d07c33f063a8a2f60a6b9353ce0201cd849bb0647f07aa343/68747470733a2f2f692e696d6775722e636f6d2f584358474e51532e706e67" alt="drawing"></a></p><h4 id="b-Navigation-View-and-DrawerLayout"><a href="#b-Navigation-View-and-DrawerLayout" class="headerlink" title="b. Navigation View and DrawerLayout"></a>b. Navigation View and DrawerLayout</h4><ul><li>make use of a <code>switch</code> case to switch to a different cuisine inside <code>MainActivity</code></li><li>once a new cuisine is selected, the corresponding Fragment (<code>ChineseFragment</code> or <code>VietnameseFragment</code>) will be added into <code>NestedScrollView</code> to show recipe <code>CardView</code></li></ul><p><a href="https://camo.githubusercontent.com/5999c15ea935afb0f770e613c479ec2efc7851c36c9310828c52d7c2ed1f4662/68747470733a2f2f692e696d6775722e636f6d2f483975595858572e706e67"><img src="https://camo.githubusercontent.com/5999c15ea935afb0f770e613c479ec2efc7851c36c9310828c52d7c2ed1f4662/68747470733a2f2f692e696d6775722e636f6d2f483975595858572e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/5c900aad16fe7c056c2d56c739c40655c21a3f26fabeb640f7660474366d78f4/68747470733a2f2f692e696d6775722e636f6d2f3378546a5734342e706e67"><img src="https://camo.githubusercontent.com/5c900aad16fe7c056c2d56c739c40655c21a3f26fabeb640f7660474366d78f4/68747470733a2f2f692e696d6775722e636f6d2f3378546a5734342e706e67" alt="drawing"></a></p><h4 id="c-RecyclerView"><a href="#c-RecyclerView" class="headerlink" title="c. RecyclerView"></a>c. RecyclerView</h4><ul><li>We user <code>RecyclerView</code> at 2 places:<ul><li>to display recipes in the Cuisine Fragment (<code>BaseFragment</code>)</li><li>to display the added ingredients and instructions when creating new recipe in Recipe Create Fragment</li></ul></li><li>To implement <code>RecyclerView</code> we need to implement the corresponding adapter as shown in <code>adapter/recipe</code> (Adapter Design Pattern)<ul><li>the 3 main functions in each adapter to override are:<ul><li><code>onCreateViewHolder</code> that inflate a new view in the parent layout to allow for display of listed items</li><li><code>onBindViewHolder</code> that binds the data to be displayed in as listed items</li><li><code>getItemCount</code> that return the size of all the items to be displayed</li></ul></li><li>in the corresponding Fragment, before we set the above adapter, we also need to set a <code>LinearLayoutManager</code> for the <code>RecyclerView</code> to reside in</li><li>code examples:</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">private RecyclerView instructionRecyclerView;instructionRecyclerView.setHasFixedSize(true);instructionRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));instructionRecyclerView.setAdapter(instructionAdapter);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-Appendix"><a href="#C-Appendix" class="headerlink" title="C. Appendix"></a>C. Appendix</h2><h3 id="0-Reference"><a href="#0-Reference" class="headerlink" title="0. Reference:"></a>0. Reference:</h3><ul><li>We made use of a some very useful Youtube tutorials + Github repos to build a normal Cooking Recipe app before adding modifications and our hand tracking feature:<ul><li><a href="https://www.youtube.com/watch?v=6-891CSz6v0">Coding with Evan</a></li><li><a href="https://www.youtube.com/watch?v=Pe5dlibIMG8&list=PLPIUB9tHYMdvnKejGY-ggulrkgj6cBb4S">Muhammad Shahid Niazi</a></li><li><a href="https://github.com/aza0092/Cooking-Recipe-Android-App">aza0092&#x2F;Cooking-Recipe-Android-App</a></li></ul></li></ul><h3 id="1-User-Story-Development"><a href="#1-User-Story-Development" class="headerlink" title="1. User Story Development"></a>1. User Story Development</h3><ul><li>BDD: Behaviour-Driven Design <a href="https://camo.githubusercontent.com/ace900256618d376a289d94c52b4ee129856488dc95b1532b5445bdd9a5fe8e9/68747470733a2f2f692e696d6775722e636f6d2f4c585a315a4c622e706e67"><img src="https://camo.githubusercontent.com/ace900256618d376a289d94c52b4ee129856488dc95b1532b5445bdd9a5fe8e9/68747470733a2f2f692e696d6775722e636f6d2f4c585a315a4c622e706e67" alt="img"></a> <a href="https://camo.githubusercontent.com/8e77afe7761d1c752b456b8dd6b02a9287eeeb2556bf67eebfd75cb8eab532b4/68747470733a2f2f692e696d6775722e636f6d2f4c61555135785a2e706e67"><img src="https://camo.githubusercontent.com/8e77afe7761d1c752b456b8dd6b02a9287eeeb2556bf67eebfd75cb8eab532b4/68747470733a2f2f692e696d6775722e636f6d2f4c61555135785a2e706e67" alt="img"></a></li><li>SMART User Stories: <strong>Specific, Measurable, Achievable, Relevant, and Time- boxed</strong> <a href="https://camo.githubusercontent.com/e088ec71ba5eeaf04f2ea9aa4eb5d1c7b17eb3474b5babff5543d718e0336b3b/68747470733a2f2f692e696d6775722e636f6d2f4644374d7373662e6a7067"><img src="https://camo.githubusercontent.com/e088ec71ba5eeaf04f2ea9aa4eb5d1c7b17eb3474b5babff5543d718e0336b3b/68747470733a2f2f692e696d6775722e636f6d2f4644374d7373662e6a7067" alt="img"></a> <a href="https://camo.githubusercontent.com/75a1f3cc1e754104f589d7546daf2581f7189189971428a45e12c60d68d09980/68747470733a2f2f692e696d6775722e636f6d2f396679714946662e6a7067"><img src="https://camo.githubusercontent.com/75a1f3cc1e754104f589d7546daf2581f7189189971428a45e12c60d68d09980/68747470733a2f2f692e696d6775722e636f6d2f396679714946662e6a7067" alt="img"></a> <a href="https://camo.githubusercontent.com/cd8254e3430cf6a97691ea6f8c46fbd5b8b0d74298715181072135a7b52ee840/68747470733a2f2f692e696d6775722e636f6d2f6d6f64657671642e706e67"><img src="https://camo.githubusercontent.com/cd8254e3430cf6a97691ea6f8c46fbd5b8b0d74298715181072135a7b52ee840/68747470733a2f2f692e696d6775722e636f6d2f6d6f64657671642e706e67" alt="img"></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Design patterns </tag>
            
            <tag> Data Base </tag>
            
            <tag> Hand Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux folder</title>
      <link href="/liangjunyi.github.io/2022/05/18/linux-folder/"/>
      <url>/liangjunyi.github.io/2022/05/18/linux-folder/</url>
      
        <content type="html"><![CDATA[<h2 id="x2F-—-The-Root-Directory"><a href="#x2F-—-The-Root-Directory" class="headerlink" title="&#x2F; — The Root Directory"></a>&#x2F; — The Root Directory</h2><p>Everything on your Linux system is located under the &#x2F; directory, known as the root directory. You can think of the &#x2F; directory as being similar to the C:\ directory on Windows — but this isn’t strictly true, as Linux doesn’t have drive letters. While another partition would be located at D:\ on Windows, this other partition would appear in another folder under &#x2F; on Linux.</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image352.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-bin-—-Essential-User-Binaries"><a href="#x2F-bin-—-Essential-User-Binaries" class="headerlink" title="&#x2F;bin — Essential User Binaries"></a>&#x2F;bin — Essential User Binaries</h2><p>The &#x2F;bin directory contains the essential user binaries (programs) that must be present when the system is mounted in single-user mode. Applications such as Firefox are stored in &#x2F;usr&#x2F;bin, while important system programs and utilities such as the bash shell are located in &#x2F;bin. The &#x2F;usr directory may be stored on another partition — placing these files in the &#x2F;bin directory ensures the system will have these important utilities even if no other file systems are mounted. The &#x2F;sbin directory is similar — it contains essential system administration binaries.</p><p>是Binary的缩写，这个目录存放着最经常使用的命令</p><ul><li>比如 <code>cal</code></li><li>比如 <code>cd</code></li></ul><p>在它下面还有 <code>/user/bin</code> 和 <code>/user/local/bin</code></p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image353.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-boot-—-Static-Boot-Files"><a href="#x2F-boot-—-Static-Boot-Files" class="headerlink" title="&#x2F;boot — Static Boot Files"></a>&#x2F;boot — Static Boot Files</h2><p>The &#x2F;boot directory contains the files needed to boot the system — for example, the GRUB boot loader’s files and your Linux kernels are stored here. The boot loader’s configuration files aren’t located here, though — they’re in &#x2F;etc with the other configuration files.</p><p>存放的是启动Linux的时候使用的一些核心文件，包括一些连接文件以及镜像文件</p><h2 id="x2F-cdrom-—-Historical-Mount-Point-for-CD-ROMs"><a href="#x2F-cdrom-—-Historical-Mount-Point-for-CD-ROMs" class="headerlink" title="&#x2F;cdrom — Historical Mount Point for CD-ROMs"></a>&#x2F;cdrom — Historical Mount Point for CD-ROMs</h2><p>The &#x2F;cdrom directory isn’t part of the FHS standard, but you’ll still find it on Ubuntu and other operating systems. It’s a temporary location for CD-ROMs inserted in the system. However, the standard location for temporary media is inside the &#x2F;media directory.</p><h2 id="x2F-dev-—-Device-Files"><a href="#x2F-dev-—-Device-Files" class="headerlink" title="&#x2F;dev — Device Files"></a>&#x2F;dev — Device Files</h2><p>Linux exposes devices as files, and the &#x2F;dev directory contains a number of special files that represent devices. These are not actual files as we know them, but they appear as files — for example, &#x2F;dev&#x2F;sda represents the first SATA drive in the system. If you wanted to partition it, you could start a partition editor and tell it to edit &#x2F;dev&#x2F;sda.</p><p>This directory also contains pseudo-devices, which are virtual devices that don’t actually correspond to hardware. For example, &#x2F;dev&#x2F;random produces random numbers. &#x2F;dev&#x2F;null is a special device that produces no output and automatically discards all input — when you pipe the output of a command to &#x2F;dev&#x2F;null, you discard it.</p><p>类似于windows设备管理器，把所有的硬件以文件的形式存储</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image354.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-etc-—-Configuration-Files"><a href="#x2F-etc-—-Configuration-Files" class="headerlink" title="&#x2F;etc — Configuration Files"></a>&#x2F;etc — Configuration Files</h2><p>The &#x2F;etc directory contains configuration files, which can generally be edited by hand in a text editor. Note that the &#x2F;etc&#x2F; directory contains system-wide configuration files — user-specific configuration files are located in each user’s home directory.</p><p>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库，安装完成后，这个mysql的配置文件 <code>mysql.conf</code> 会放入这个目录下</p><h2 id="x2F-home-—-Home-Folders"><a href="#x2F-home-—-Home-Folders" class="headerlink" title="&#x2F;home — Home Folders"></a>&#x2F;home — Home Folders</h2><p>The &#x2F;home directory contains a home folder for each user. For example, if your user name is bob, you have a home folder located at &#x2F;home&#x2F;bob. This home folder contains the user’s data files and user-specific configuration files. Each user only has write access to their own home folder and must obtain elevated permissions (become the root user) to modify other files on the system.</p><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image355.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-lib-—-Essential-Shared-Libraries"><a href="#x2F-lib-—-Essential-Shared-Libraries" class="headerlink" title="&#x2F;lib — Essential Shared Libraries"></a>&#x2F;lib — Essential Shared Libraries</h2><p>The &#x2F;lib directory contains libraries needed by the essential binaries in the &#x2F;bin and &#x2F;sbin folder. Libraries needed by the binaries in the &#x2F;usr&#x2F;bin folder are located in &#x2F;usr&#x2F;lib.</p><p>系统开机所需要的最基本的动态链接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><h2 id="x2F-lost-found-—-Recovered-Files"><a href="#x2F-lost-found-—-Recovered-Files" class="headerlink" title="&#x2F;lost+found — Recovered Files"></a>&#x2F;lost+found — Recovered Files</h2><p>Each Linux file system has a lost+found directory. If the file system crashes, a file system check will be performed at next boot. Any corrupted files found will be placed in the lost+found directory, so you can attempt to recover as much data as possible.</p><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p><p>这个目录直接看找不到，在cmd中根目录下能看到指令为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> / <span class="token comment"># 到根目录下</span><span class="token function">ls</span> <span class="token comment"># 展示当前目录的东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="x2F-media-—-Removable-Media"><a href="#x2F-media-—-Removable-Media" class="headerlink" title="&#x2F;media — Removable Media"></a>&#x2F;media — Removable Media</h2><p>The &#x2F;media directory contains subdirectories where removable media devices inserted into the computer are mounted. For example, when you insert a CD into your Linux system, a directory will automatically be created inside the &#x2F;media directory. You can access the contents of the CD inside this directory.</p><p>linux系统会自动识别一些设备，例如U盘，光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p><h2 id="x2F-mnt-—-Temporary-Mount-Points"><a href="#x2F-mnt-—-Temporary-Mount-Points" class="headerlink" title="&#x2F;mnt — Temporary Mount Points"></a>&#x2F;mnt — Temporary Mount Points</h2><p>Historically speaking, the &#x2F;mnt directory is where system administrators mounted temporary file systems while using them. For example, if you’re mounting a Windows partition to perform some file recovery operations, you might mount it at &#x2F;mnt&#x2F;windows. However, you can mount other file systems anywhere on the system.</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载到 <code>/mnt/</code> 上，然后进入该目录就可以查看里面的内容了   </p><p><code>d:/myshare</code> 就用到了这个目录，使我们虚拟机linux和windows共享了这个文件夹</p><h2 id="x2F-opt-—-Optional-Packages"><a href="#x2F-opt-—-Optional-Packages" class="headerlink" title="&#x2F;opt — Optional Packages"></a>&#x2F;opt — Optional Packages</h2><p>The &#x2F;opt directory contains subdirectories for optional software packages. It’s commonly used by proprietary software that doesn’t obey the standard file system hierarchy — for example, a proprietary program might dump its files in &#x2F;opt&#x2F;application when you install it.</p><p>这是给主机额外安装软件所存放的目录。如安装ORACLE数据库就可以放到该目录下。默认为空。</p><p>一般我们先把安装文件拷贝到opt目录下面来，便于管理，约定俗成</p><h2 id="x2F-proc-—-Kernel-amp-Process-Files"><a href="#x2F-proc-—-Kernel-amp-Process-Files" class="headerlink" title="&#x2F;proc — Kernel &amp; Process Files"></a>&#x2F;proc — Kernel &amp; Process Files</h2><p>The &#x2F;proc directory similar to the &#x2F;dev directory because it doesn’t contain standard files. It contains special files that represent system and process information.</p><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息，一般不能动这个文件</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image356.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-root-—-Root-Home-Directory"><a href="#x2F-root-—-Root-Home-Directory" class="headerlink" title="&#x2F;root — Root Home Directory"></a>&#x2F;root — Root Home Directory</h2><p>The &#x2F;root directory is the home directory of the root user. Instead of being located at &#x2F;home&#x2F;root, it’s located at &#x2F;root. This is distinct from &#x2F;, which is the system root directory.</p><p>该目录为系统管理员，也称作超级权限者的用户主目录</p><h2 id="x2F-run-—-Application-State-Files"><a href="#x2F-run-—-Application-State-Files" class="headerlink" title="&#x2F;run — Application State Files"></a>&#x2F;run — Application State Files</h2><p>The &#x2F;run directory is fairly new, and gives applications a standard place to store transient files they require like sockets and process IDs. These files can’t be stored in &#x2F;tmp because files in &#x2F;tmp may be deleted.</p><h2 id="x2F-sbin-—-System-Administration-Binaries"><a href="#x2F-sbin-—-System-Administration-Binaries" class="headerlink" title="&#x2F;sbin — System Administration Binaries"></a>&#x2F;sbin — System Administration Binaries</h2><p>The &#x2F;sbin directory is similar to the &#x2F;bin directory. It contains essential binaries that are generally intended to be run by the root user for system administration.</p><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image357.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-selinux-—-SELinux-Virtual-File-System"><a href="#x2F-selinux-—-SELinux-Virtual-File-System" class="headerlink" title="&#x2F;selinux — SELinux Virtual File System"></a>&#x2F;selinux — SELinux Virtual File System</h2><p>If your Linux distribution uses SELinux for security (Fedora and Red Hat, for example), the &#x2F;selinux directory contains special files used by SELinux. It’s similar to &#x2F;proc. Ubuntu doesn’t use SELinux, so the presence of this folder on Ubuntu appears to be a bug.</p><p>security-enhanced linux SELinux是一种安全子系统，他能控制程序只能访问特定文件，有三种工作模式，可以自行设置</p><h2 id="x2F-srv-—-Service-Data"><a href="#x2F-srv-—-Service-Data" class="headerlink" title="&#x2F;srv — Service Data"></a>&#x2F;srv — Service Data</h2><p>The &#x2F;srv directory contains “data for services provided by the system.” If you were using the Apache HTTP server to serve a website, you’d likely store your website’s files in a directory inside the &#x2F;srv directory.</p><p><strong>RELATED:</strong> <a href="https://www.howtogeek.com/devops/how-to-find-your-apache-configuration-folder/">*<strong>How to Find Your Apache Configuration Folder*</strong></a></p><p>service的缩写，该目录存放一些服务启动之后需要提取的数据</p><h2 id="x2F-tmp-—-Temporary-Files"><a href="#x2F-tmp-—-Temporary-Files" class="headerlink" title="&#x2F;tmp — Temporary Files"></a>&#x2F;tmp — Temporary Files</h2><p>Applications store temporary files in the &#x2F;tmp directory. These files are generally deleted whenever your system is restarted and may be deleted at any time by utilities such as tmpwatch.</p><p>存放一些临时文件</p><h2 id="x2F-usr-—-User-Binaries-amp-Read-Only-Data"><a href="#x2F-usr-—-User-Binaries-amp-Read-Only-Data" class="headerlink" title="&#x2F;usr — User Binaries &amp; Read-Only Data"></a>&#x2F;usr — User Binaries &amp; Read-Only Data</h2><p>The &#x2F;usr directory contains applications and files used by users, as opposed to applications and files used by the system. For example, non-essential applications are located inside the &#x2F;usr&#x2F;bin directory instead of the &#x2F;bin directory and non-essential system administration binaries are located in the &#x2F;usr&#x2F;sbin directory instead of the &#x2F;sbin directory. Libraries for each are located inside the &#x2F;usr&#x2F;lib directory. The &#x2F;usr directory also contains other directories — for example, architecture-independent files like graphics are located in &#x2F;usr&#x2F;share.</p><p>The &#x2F;usr&#x2F;local directory is where locally compiled applications install to by default — this prevents them from mucking up the rest of the system.</p><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录</p><p><code>/usr/local</code> 是另一个给主机额外安装软件的目录。一般是通过编译源码方式安装的程序。</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image358.png?trim=1,1&bg-color=000&pad=1,1" alt="img"></p><h2 id="x2F-var-—-Variable-Data-Files"><a href="#x2F-var-—-Variable-Data-Files" class="headerlink" title="&#x2F;var — Variable Data Files"></a>&#x2F;var — Variable Data Files</h2><p>The &#x2F;var directory is the writable counterpart to the &#x2F;usr directory, which must be read-only in normal operation. Log files and everything else that would normally be written to &#x2F;usr during normal operation are written to the &#x2F;var directory. For example, you’ll find log files in &#x2F;var&#x2F;log.</p><p>这个目录中存放着在不断扩充的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/liangjunyi.github.io/2022/05/18/hello-world/"/>
      <url>/liangjunyi.github.io/2022/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
